# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "gui.hpp"} {selected
} 

decl {\#include <vector>} {} 

decl {\#include <FL/Fl_Text_Buffer.H>} {} 

class Plus4EmuGUI_DebugWindow {open
} {
  decl {friend class Plus4EmuGUIMonitor;} {public
  }
  decl {Plus4EmuGUI& gui;} {}
  decl {char windowTitle[64];} {}
  decl {int savedWindowPositionX;} {}
  decl {int savedWindowPositionY;} {}
  decl {Fl_Widget *focusWidget;} {}
  decl {Fl_Widget *prvTab;} {}
  decl {uint32_t memoryDumpStartAddress;} {}
  decl {uint32_t memoryDumpEndAddress;} {}
  decl {uint32_t memoryDumpViewAddress;} {}
  decl {bool memoryDumpCPUAddressMode;} {}
  decl {bool memoryDumpASCIIFileFormat;} {}
  decl {uint32_t disassemblyStartAddress;} {}
  decl {uint32_t disassemblyViewAddress;} {}
  decl {uint32_t disassemblyNextAddress;} {}
  decl {Fl_Text_Buffer *bpEditBuffer;} {}
  decl {std::string breakPointLists[6];} {}
  Function {Plus4EmuGUI_DebugWindow(Plus4EmuGUI& gui_) : gui(gui_)} {open
  } {
    code {{
  for (size_t i = 0; i < sizeof(windowTitle); i++)
    windowTitle[i] = '\\0';
  std::strcpy(&(windowTitle[0]), "plus4emu debugger");
  savedWindowPositionX = 32;
  savedWindowPositionY = 32;
  focusWidget = (Fl_Widget *) 0;
  prvTab = (Fl_Widget *) 0;
  memoryDumpStartAddress = 0x00000000U;
  memoryDumpEndAddress = 0x0000007FU;
  memoryDumpViewAddress = 0x00000000U;
  memoryDumpCPUAddressMode = true;
  memoryDumpASCIIFileFormat = false;
  disassemblyStartAddress = 0x00000000U;
  disassemblyViewAddress = 0x00000000U;
  disassemblyNextAddress = 0x00000000U;
  for (int i = 0; i < 6; i++)
    breakPointLists[i] = "";
  bpEditBuffer = new Fl_Text_Buffer();
}} {}
    Fl_Window window {
      callback {{
  focusWidget = (Fl_Widget *) 0;
  gui.vm.setSingleStepMode(0);
  this->hide();
}} open
      xywh {308 146 540 450} type Double color 37 visible
    } {
      Fl_Tabs debugTabs {
        callback {{
  if (prvTab == monitorTab)
    updateWindow();
  prvTab = o->value();
}} open
        xywh {10 10 520 395} color 38 selection_color 38 labelcolor 52
      } {
        Fl_Group mainTab {
          label General open
          xywh {10 35 520 370} box THIN_UP_BOX color 38 selection_color 38 labelcolor 52
        } {
          Fl_Output cpuRegisterDisplay {
            label {CPU registers}
            xywh {20 63 363 80} type Multiline color 0 selection_color 238 labelcolor 52 align 5 textfont 5 textcolor 159
          }
          Fl_Output memoryPagingDisplay {
            label {Memory paging}
            xywh {393 63 127 80} type Multiline color 0 selection_color 238 labelcolor 52 align 5 textfont 5 textcolor 159
          }
          Fl_Output codeMemoryDumpDisplay {
            label Code
            xywh {20 168 500 100} type Multiline color 0 selection_color 238 labelcolor 52 align 5 textfont 5 textcolor 159
          }
          Fl_Output stackMemoryDumpDisplay {
            label Stack
            xywh {20 293 500 100} type Multiline color 0 selection_color 238 labelcolor 52 align 5 textfont 5 textcolor 159
          }
        }
        Fl_Group {} {
          label Memory open
          xywh {10 35 520 370} box THIN_UP_BOX color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Input searchStringValuator {
            label Search
            callback {{
  if (o->value()) {
    try {
      std::vector<std::string>  args;
      {
        std::string tmp("H ");
        tmp += o->value();
        Plus4EmuGUIMonitor::tokenizeString(args, tmp.c_str());
      }
      int32_t addr = monitor_->searchPattern(
          args, 1, args.size() - 1,
          memoryDumpViewAddress + 1U, memoryDumpViewAddress,
          memoryDumpCPUAddressMode);
      if (addr >= 0) {
        memoryDumpViewAddress = uint32_t(addr);
        updateMemoryDumpDisplay();
      }
      else
        throw Plus4Emu::Exception("Search string not found");
    }
    catch (std::exception& e) {
      gui.errorMessage(e.what());
    }
  }
}}
            tooltip {The search string can be specified with the syntax used by the H and SR monitor commands} xywh {20 63 375 25} color 0 selection_color 238 labelcolor 52 align 5 when 10 textfont 4 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
          }
          Fl_Button {} {
            label {Find next}
            callback {{
  searchStringValuator->do_callback();
}}
            xywh {405 63 115 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Output memoryDumpDisplay {
            label {Memory dump}
            xywh {20 113 375 280} type Multiline color 0 selection_color 238 labelcolor 52 align 5 textfont 5 textcolor 159
          }
          Fl_Light_Button {} {
            label {CPU address}
            callback {{
  memoryDumpCPUAddressMode = (o->value() != 0);
  updateMemoryDumpDisplay();
}}
            tooltip {Select if 16 bit CPU, or 22 bit physical addresses are to be used} xywh {405 115 115 25} value 1 color 39 labelcolor 52
          }
          Fl_Input memoryDumpStartAddressValuator {
            label {Start address}
            callback {{
  if (parseHexNumber(memoryDumpStartAddress, o->value()) > 0L) {
    if (memoryDumpStartAddress != memoryDumpViewAddress) {
      memoryDumpViewAddress = memoryDumpStartAddress;
      updateMemoryDumpDisplay();
    }
  }
}}
            xywh {405 160 115 25} color 0 selection_color 238 labelcolor 52 align 5 textfont 4 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
            code1 {o->value("0000");}
          }
          Fl_Input memoryDumpEndAddressValuator {
            label {End address}
            callback {{
  parseHexNumber(memoryDumpEndAddress, o->value());
  updateMemoryDumpDisplay();
}}
            tooltip {End address of memory dump (for file I/O only); this address is still included} xywh {405 205 115 25} color 0 selection_color 238 labelcolor 52 align 5 textfont 4 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
            code1 {o->value("007F");}
          }
          Fl_Button {} {
            label {@<}
            callback {{
  memoryDumpViewAddress = (memoryDumpViewAddress + 0x003FFF80U) & 0x003FFFFFU;
  updateMemoryDumpDisplay();
}}
            tooltip {View previous page} xywh {405 250 40 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Button {} {
            label {@|<}
            callback {{
  if (memoryDumpStartAddress != memoryDumpViewAddress) {
    memoryDumpViewAddress = memoryDumpStartAddress;
    updateMemoryDumpDisplay();
  }
}}
            tooltip {Return to start address} xywh {450 250 25 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Button {} {
            label {@>}
            callback {{
  memoryDumpViewAddress = (memoryDumpViewAddress + 0x80U) & 0x003FFFFFU;
  updateMemoryDumpDisplay();
}}
            tooltip {View next page} xywh {480 250 40 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Light_Button {} {
            label {ASCII format}
            callback {{
  memoryDumpASCIIFileFormat = (o->value() != 0);
}}
            tooltip {Select if memory dump file format should be ASCII or binary} xywh {405 295 115 25} color 39 labelcolor 52
          }
          Fl_Button {} {
            label {Load from file}
            callback {{
  std::FILE *f = (std::FILE *) 0;
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.debuggerDirectory,
                       "All files (*)", Fl_File_Chooser::SINGLE,
                       "Load memory")) {
      f = std::fopen(tmp.c_str(), "rb");
      if (!f)
        throw Plus4Emu::Exception("cannot open file");
      if (memoryDumpASCIIFileFormat) {
        tmp = "";
        while (true) {
          int   c = std::fgetc(f);
          if (c == EOF)
            break;
          if (char(c) != '\\0')
            tmp += char(c);
        }
        parseMemoryDump(tmp.c_str());
      }
      else {
        uint32_t  addr = memoryDumpStartAddress;
        uint32_t  addrMask = uint32_t(memoryDumpCPUAddressMode ? 0x00FFFFU : 0x3FFFFFU);
        while (true) {
          int   c = std::fgetc(f);
          if (c == EOF)
            break;
          gui.vm.writeMemory(addr, uint8_t(c & 0xFF), memoryDumpCPUAddressMode);
          if (((addr ^ memoryDumpEndAddress) & addrMask) == 0U)
            break;
          addr++;
        }
      }
      std::fclose(f);
    }
  }
  catch (std::exception& e) {
    if (f)
      std::fclose(f);
    gui.errorMessage(e.what());
  }
  updateWindow();
}}
            xywh {405 330 115 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Button {} {
            label {Save to file}
            callback {{
  std::FILE *f = (std::FILE *) 0;
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.debuggerDirectory,
                       "All files (*)", Fl_File_Chooser::CREATE,
                       "Save memory")) {
      if (memoryDumpASCIIFileFormat)
        f = std::fopen(tmp.c_str(), "w");
      else
        f = std::fopen(tmp.c_str(), "wb");
      if (!f)
        throw Plus4Emu::Exception("cannot open file");
      if (memoryDumpASCIIFileFormat) {
        dumpMemory(tmp, memoryDumpStartAddress, memoryDumpEndAddress,
                   0U, false, memoryDumpCPUAddressMode);
        tmp += '\\n';
        for (size_t i = 0; i < tmp.length(); i++) {
          if (std::fputc(tmp[i], f) == EOF)
            throw Plus4Emu::Exception("error writing file - is the disk full ?");
        }
      }
      else {
        uint32_t  addr = memoryDumpStartAddress;
        uint32_t  addrMask = uint32_t(memoryDumpCPUAddressMode ? 0x00FFFFU : 0x3FFFFFU);
        while (true) {
          uint8_t c = gui.vm.readMemory(addr, memoryDumpCPUAddressMode);
          if (std::fputc(c, f) == EOF)
            throw Plus4Emu::Exception("error writing file - is the disk full ?");
          if (((addr ^ memoryDumpEndAddress) & addrMask) == 0U)
            break;
          addr++;
        }
      }
      std::fclose(f);
    }
  }
  catch (std::exception& e) {
    if (f)
      std::fclose(f);
    gui.errorMessage(e.what());
  }
}}
            xywh {405 365 115 25} color 39 selection_color 40 labelcolor 52
          }
        }
        Fl_Group {} {
          label Disassemble open
          xywh {10 35 520 370} box THIN_UP_BOX color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Output disassemblyDisplay {
            xywh {20 48 375 345} type Multiline color 0 selection_color 238 labelcolor 52 align 5 textfont 5 textcolor 159
          }
          Fl_Input disassemblyStartAddressValuator {
            label {Start address}
            callback {{
  if (parseHexNumber(disassemblyStartAddress, o->value()) > 0L)
    disassemblyViewAddress = disassemblyStartAddress;
  updateDisassemblyDisplay();
}}
            xywh {405 70 115 25} color 0 selection_color 238 labelcolor 52 align 5 textfont 4 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
            code1 {o->value("0000");}
          }
          Fl_Button {} {
            label {@|<}
            callback {{
  if (disassemblyViewAddress != disassemblyStartAddress) {
    disassemblyViewAddress = disassemblyStartAddress;
    updateDisassemblyDisplay();
  }
}}
            tooltip {Return to start address} xywh {405 115 55 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Button {} {
            label {@>}
            callback {{
  disassemblyViewAddress = disassemblyNextAddress;
  updateDisassemblyDisplay();
}}
            tooltip {View next page} xywh {465 115 55 25} color 39 selection_color 40 labelcolor 52
          }
        }
        Fl_Group monitorTab {
          label Monitor open
          xywh {10 35 520 370} box THIN_UP_BOX color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Text_Editor monitor_ {
            tooltip {Type ? for a list of available commands, and ? CMD for help on command CMD} xywh {20 48 500 345} color 0 selection_color 238 labelcolor 52 when 0 textfont 5 textcolor 159
            code0 {o->setDebugger(*this);}
            code1 {o->cursor_style(Fl_Text_Display::BLOCK_CURSOR);}
            code2 {o->cursor_color(FL_YELLOW);}
            class Plus4EmuGUIMonitor
          }
        }
        Fl_Group breakPointsTab {
          label Watchpoints open
          xywh {10 35 520 370} box THIN_UP_BOX color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Text_Editor breakPointEditor {
            callback {{
  applyBreakPointList();
}}
            tooltip {Enter watchpoint definitions, separated by spaces or newlines. Allowed formats include NNNN (memory, CPU address), and NNNN:NN (TED video position as Y:X); each N is a hexadecimal digit. Address ranges (separated by a - character) can also be specified. Use the following suffixes to check for read or write access only, set priority, or ignore watchpoints depending on the program counter: r, w, p0, p1, p2, p3, i.} xywh {20 48 345 345} box DOWN_BOX color 0 selection_color 238 labelcolor 52 align 5 textfont 4 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
            code1 {o->buffer(bpEditBuffer);}
          }
          Fl_Light_Button noBreakOnDataReadValuator {
            label {Ignore data reads}
            callback {{
  gui.config.debug.noBreakOnDataRead = (o->value() != 0);
  gui.config.debugSettingsChanged = true;
  try {
    gui.config.applySettings();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {375 50 145 25} color 39 labelcolor 52
          }
          Fl_Value_Slider bpPriorityThresholdValuator {
            label {Priority threshold}
            callback {{
  gui.config.debug.bpPriorityThreshold = int(o->value() + 0.5);
  gui.config.debugSettingsChanged = true;
  try {
    gui.config.applySettings();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {375 95 145 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 5 maximum 4 step 1 textcolor 52
          }
          Fl_Light_Button breakOnInvalidOpcodeValuator {
            label {Break on CPU jam}
            callback {{
  gui.config.debug.breakOnInvalidOpcode = (o->value() != 0);
  gui.config.debugSettingsChanged = true;
  try {
    gui.config.applySettings();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {375 140 145 25} color 39 labelcolor 52
          }
          Fl_Button {} {
            label {Load from file}
            callback {{
  std::FILE *f = (std::FILE *) 0;
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.debuggerDirectory,
                       "All files (*)",
                       Fl_File_Chooser::SINGLE,
                       "Load watchpoint definitions from file")) {
      f = std::fopen(tmp.c_str(), "rb");
      if (!f)
        throw Plus4Emu::Exception("cannot open file");
      tmp = "";
      bool  crFlag = false;
      while (true) {
        int   c = std::fgetc(f);
        if (crFlag) {
          crFlag = false;
          if (c == '\\n')
            continue;
        }
        if (c == EOF)
          break;
        if (char(c) == '\\0')
          continue;
        if (c == '\\r') {
          tmp += '\\n';
          crFlag = true;
        }
        else
          tmp += char(c);
      }
      std::fclose(f);
      f = (std::FILE *) 0;
      bpEditBuffer->text(tmp.c_str());
      Plus4Emu::BreakPointList  bpList(tmp);
      gui.vm.clearBreakPoints();
      gui.vm.setBreakPoints(bpList);
    }
  }
  catch (std::exception& e) {
    if (f)
      std::fclose(f);
    gui.errorMessage(e.what());
  }
}}
            xywh {375 185 145 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Button {} {
            label {Save to file}
            callback {{
  std::FILE   *f = (std::FILE *) 0;
  const char  *buf = (char *) 0;
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.debuggerDirectory,
                       "All files (*)",
                       Fl_File_Chooser::CREATE,
                       "Save watchpoint definitions to file")) {
      f = std::fopen(tmp.c_str(), "w");
      if (!f)
        throw Plus4Emu::Exception("cannot open file");
      buf = bpEditBuffer->text();
      if (!buf)
        throw std::bad_alloc();
      const char  *bufp = buf;
      char        c = '\\0';
      while ((*bufp) != '\\0') {
        c = *(bufp++);
        if (std::fputc(c, f) == EOF)
          throw Plus4Emu::Exception("error writing file - is the disk full ?");
      }
      if (c != '\\n') {
        if (std::fputc('\\n', f) == EOF)
          throw Plus4Emu::Exception("error writing file - is the disk full ?");
      }
      std::free(const_cast<char *>(buf));
      std::fclose(f);
    }
  }
  catch (std::exception& e) {
    if (buf)
      std::free(const_cast<char *>(buf));
    if (f)
      std::fclose(f);
    gui.errorMessage(e.what());
  }
}}
            xywh {375 230 145 25} color 39 selection_color 40 labelcolor 52
          }
          Fl_Button {} {
            label Apply
            callback {{
  applyBreakPointList();
}}
            tooltip {Reset watchpoints from text format definition} xywh {375 365 145 25} color 39 selection_color 40 labelcolor 52
          }
        }
      }
      Fl_Choice debugContextValuator {
        callback {{
  if (o->value() >= 0) {
    setDebugContext(o->value());
    updateWindow();
  }
}} open
        xywh {15 415 150 25} down_box BORDER_BOX color 0 selection_color 238 labelcolor 3 align 8 textcolor 52
        code0 {o->add("Main CPU|Unit 8|Unit 9|Unit 10|Unit 11|Printer");}
        code1 {o->value(gui.vm.getDebugContext());}
      } {}
      Fl_Button stepButton {
        label Step
        callback {{
  focusWidget = stepButton;
  gui.vm.setSingleStepMode(1);
  this->hide();
}}
        xywh {265 415 80 25} color 38 selection_color 39 labelcolor 52
      }
      Fl_Button stepOverButton {
        label {Step over}
        callback {{
  focusWidget = stepButton;
  gui.vm.setSingleStepMode(2);
  this->hide();
}}
        xywh {355 415 80 25} color 38 selection_color 39 labelcolor 52
      }
      Fl_Button continueButton {
        label Continue
        callback {{
  focusWidget = continueButton;
  gui.vm.setSingleStepMode(0);
  this->hide();
}}
        xywh {445 415 80 25} color 38 selection_color 39 labelcolor 52
      }
    }
    code {{
  window->label(&(windowTitle[0]));
}} {}
  }
  Function {~Plus4EmuGUI_DebugWindow()} {open
  } {
    code {{
  delete window;
  delete bpEditBuffer;
}} {}
  }
  Function {show()} {open return_type void
  } {
    code {{
  monitor_->closeTraceFile();
  updateWindow();
  if (!window->shown()) {
    window->resize(savedWindowPositionX, savedWindowPositionY, 540, 450);
    if (focusWidget != (Fl_Widget *) 0 && focusWidget != monitor_)
      focusWidget->take_focus();
    else
      stepButton->take_focus();
  }
  window->show();
}} {}
  }
  Function {shown()} {open return_type bool
  } {
    code {{
  return !!(window->shown());
}} {}
  }
  Function {hide()} {open return_type void
  } {
    code {{
  if (window->shown()) {
    savedWindowPositionX = window->x();
    savedWindowPositionY = window->y();
  }
  window->hide();
  if (gui.debugWindowOpenFlag) {
    gui.debugWindowOpenFlag = false;
    gui.unlockVMThread();
  }
  std::strcpy(&(windowTitle[0]), "plus4emu debugger");
  window->label(&(windowTitle[0]));
}} {}
  }
  Function {breakPoint(int debugContext_, int type, uint16_t addr, uint8_t value)} {open return_type bool
  } {
    code {{
  if ((type == 0 || type == 3) && monitor_->getIsTraceOn()) {
    monitor_->writeTraceFile(debugContext_, addr);
    if (type == 3)
      return false;
  }
  switch (type) {
  case 0:
  case 3:
    try {
      std::string tmpBuf;
      tmpBuf.reserve(40);
      gui.vm.disassembleInstruction(tmpBuf, addr, true);
      if (tmpBuf.length() > 21 && tmpBuf.length() <= 40) {
        std::sprintf(&(windowTitle[0]), "Break at PC=%04X: %s",
                     (unsigned int) (addr & 0xFFFF), (tmpBuf.c_str() + 21));
        break;
      }
    }
    catch (...) {
    }
  case 1:
    std::sprintf(&(windowTitle[0]),
                 "Break on reading %02X from memory address %04X",
                 (unsigned int) (value & 0xFF), (unsigned int) (addr & 0xFFFF));
    break;
  case 2:
    std::sprintf(&(windowTitle[0]),
                 "Break on writing %02X to memory address %04X",
                 (unsigned int) (value & 0xFF), (unsigned int) (addr & 0xFFFF));
    break;
  case 4:
    std::sprintf(&(windowTitle[0]),
                 "Break at TED video position %04X:%02X",
                 (unsigned int) ((addr >> 7) & 0x01FF),
                 (unsigned int) ((addr & 0x7F) << 1));
    break;
  default:
    std::sprintf(&(windowTitle[0]), "Break");
  }
  window->label(&(windowTitle[0]));
  if (debugTabs->value() == breakPointsTab)
    debugTabs->value(mainTab);
  setDebugContext(debugContext_);
  debugContextValuator->value(debugContext_);
  disassemblyViewAddress = uint32_t(gui.vm.getProgramCounter() & 0xFFFF);
  if (focusWidget == monitor_)
    monitor_->breakMessage(&(windowTitle[0]));
  return true;
}} {}
  }
  Function {updateWindow()} {open return_type void
  } {
    code {{
  try {
    std::string buf;
    gui.vm.listCPURegisters(buf);
    cpuRegisterDisplay->value(buf.c_str());
    {
      char  tmpBuf[64];
      std::sprintf(&(tmpBuf[0]), "0000-3FFF: %02X\\n4000-7FFF: %02X\\n"
                                 "8000-BFFF: %02X\\nC000-FFFF: %02X",
                   (unsigned int) gui.vm.getMemoryPage(0),
                   (unsigned int) gui.vm.getMemoryPage(1),
                   (unsigned int) gui.vm.getMemoryPage(2),
                   (unsigned int) gui.vm.getMemoryPage(3));
      memoryPagingDisplay->value(&(tmpBuf[0]));
    }
    uint32_t  tmp = gui.vm.getProgramCounter();
    uint32_t  startAddr = (tmp + 0xFFECU) & 0xFFF8U;
    uint32_t  endAddr = (startAddr + 0x002FU) & 0xFFFFU;
    dumpMemory(buf, startAddr, endAddr, tmp, true, true);
    codeMemoryDumpDisplay->value(buf.c_str());
    tmp = gui.vm.getStackPointer();
    startAddr = (tmp + 0xFFF4U) & 0xFFF8U;
    endAddr = (startAddr + 0x002FU) & 0xFFFFU;
    dumpMemory(buf, startAddr, endAddr, tmp, true, true);
    stackMemoryDumpDisplay->value(buf.c_str());
    updateMemoryDumpDisplay();
    updateDisassemblyDisplay();
    noBreakOnDataReadValuator->value(gui.config.debug.noBreakOnDataRead ? 1 : 0);
    bpPriorityThresholdValuator->value(double(gui.config.debug.bpPriorityThreshold));
    breakOnInvalidOpcodeValuator->value(gui.config.debug.breakOnInvalidOpcode ? 1 : 0);
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {dumpMemory(std::string& buf, uint32_t startAddr, uint32_t endAddr, uint32_t cursorAddr, bool showCursor, bool isCPUAddress)} {open private return_type void
  } {
    code {{
  try {
    char      tmpBuf[8];
    buf = "";
    int       cnt = 0;
    uint32_t  addrMask = uint32_t(isCPUAddress ? 0x0000FFFFU : 0x003FFFFFU);
    endAddr &= addrMask;
    cursorAddr &= addrMask;
    while (true) {
      startAddr &= addrMask;
      if (cnt == 8) {
        cnt = 0;
        buf += '\\n';
      }
      if (!cnt) {
        if (isCPUAddress)
          std::sprintf(&(tmpBuf[0]), "  %04X", (unsigned int) startAddr);
        else
          std::sprintf(&(tmpBuf[0]), "%06X", (unsigned int) startAddr);
        buf += &(tmpBuf[0]);
      }
      if (!(cnt & 3)) {
        if (showCursor && startAddr == cursorAddr)
          std::sprintf(&(tmpBuf[0]), "  *%02X", (unsigned int) gui.vm.readMemory(startAddr, isCPUAddress));
        else
          std::sprintf(&(tmpBuf[0]), "   %02X", (unsigned int) gui.vm.readMemory(startAddr, isCPUAddress));
      }
      else {
        if (showCursor && startAddr == cursorAddr)
          std::sprintf(&(tmpBuf[0]), " *%02X", (unsigned int) gui.vm.readMemory(startAddr, isCPUAddress));
        else
          std::sprintf(&(tmpBuf[0]), "  %02X", (unsigned int) gui.vm.readMemory(startAddr, isCPUAddress));
      }
      buf += &(tmpBuf[0]);
      if (startAddr == endAddr)
        break;
      startAddr++;
      cnt++;
    }
  }
  catch (std::exception& e) {
    buf.clear();
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {updateMemoryDumpDisplay()} {open private return_type void
  } {
    code {{
  try {
    uint32_t  addrMask = uint32_t(memoryDumpCPUAddressMode ? 0x00FFFFU : 0x3FFFFFU);
    memoryDumpStartAddress &= addrMask;
    memoryDumpEndAddress &= addrMask;
    memoryDumpViewAddress &= addrMask;
    const char  *fmt = (memoryDumpCPUAddressMode ? "%04X" : "%06X");
    char  tmpBuf[8];
    std::sprintf(&(tmpBuf[0]), fmt, (unsigned int) memoryDumpStartAddress);
    memoryDumpStartAddressValuator->value(&(tmpBuf[0]));
    std::sprintf(&(tmpBuf[0]), fmt, (unsigned int) memoryDumpEndAddress);
    memoryDumpEndAddressValuator->value(&(tmpBuf[0]));
    std::string buf;
    dumpMemory(buf, memoryDumpViewAddress, memoryDumpViewAddress + 0x87U,
               0U, false, memoryDumpCPUAddressMode);
    memoryDumpDisplay->value(buf.c_str());
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {parseHexNumber(uint32_t& value, const char *s)} {open private return_type long
  } {
    code {{
  long  cnt = 0L;
  if (!s)
    return 0L;
  while (*s == ' ' || *s == '\\t') {
    s++;
    cnt++;
  }
  if (*s == '\\0')
    return 0L;
  if (*s == '\\r' || *s == '\\n')
    return (-(cnt + 1L));
  uint32_t  tmpVal = 0U;
  while (true) {
    char  c = *s;
    if (c == ' ' || c == '\\t' || c == '\\r' || c == '\\n' || c == '\\0') {
      value = tmpVal;
      return cnt;
    }
    tmpVal = (tmpVal << 4) & 0xFFFFFFFFU;
    if (c >= '0' && c <= '9')
      tmpVal += uint32_t(c - '0');
    else if (c >= 'A' && c <= 'F')
      tmpVal += uint32_t((c - 'A') + 10);
    else if (c >= 'a' && c <= 'f')
      tmpVal += uint32_t((c - 'a') + 10);
    else {
      gui.errorMessage("invalid hexadecimal number format");
      return 0L;
    }
    s++;
    cnt++;
  }
  return 0L;
}} {}
  }
  Function {parseMemoryDump(const char *s)} {open private return_type void
  } {
    code {{
  uint32_t  addr = 0U;
  bool      haveAddress = false;
  try {
    while (true) {
      uint32_t  tmp = 0U;
      long      n = parseHexNumber(tmp, s);
      if (!n)           // end of string or error
        break;
      if (n < 0L) {     // end of line
        n = (-n);
        haveAddress = false;
        s = s + n;
      }
      else {
        s = s + n;
        if (!haveAddress) {
          addr = tmp & 0x3FFFFFU;
          haveAddress = true;
        }
        else {
          gui.vm.writeMemory(addr, uint8_t(tmp & 0xFFU), memoryDumpCPUAddressMode);
          addr++;
        }
      }
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {updateDisassemblyDisplay()} {open private return_type void
  } {
    code {{
  try {
    disassemblyStartAddress &= 0xFFFFU;
    disassemblyViewAddress &= 0xFFFFU;
    disassemblyNextAddress &= 0xFFFFU;
    char  tmpBuf[8];
    std::sprintf(&(tmpBuf[0]), "%04X", (unsigned int) disassemblyStartAddress);
    disassemblyStartAddressValuator->value(&(tmpBuf[0]));
    std::string tmp1;
    std::string tmp2;
    tmp2.reserve(864);
    uint32_t  addr = disassemblyViewAddress;
    for (int i = 0; i < 20; i++) {
      addr = gui.vm.disassembleInstruction(tmp1, addr, true, 0);
      tmp2 += tmp1;
      tmp2 += '\\n';
    }
    disassemblyNextAddress = addr;
    gui.vm.disassembleInstruction(tmp1, addr, true, 0);
    tmp2 += tmp1;
    disassemblyDisplay->value(tmp2.c_str());
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {applyBreakPointList()} {open private return_type void
  } {
    code {{
  const char  *buf = (char *) 0;
  try {
    buf = bpEditBuffer->text();
    if (!buf)
      throw std::bad_alloc();
    std::string bpListText(buf);
    std::free(const_cast<char *>(buf));
    buf = (char *) 0;
    Plus4Emu::BreakPointList  bpList(bpListText);
    gui.vm.clearBreakPoints();
    gui.vm.setBreakPoints(bpList);
  }
  catch (std::exception& e) {
    if (buf)
      std::free(const_cast<char *>(buf));
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {setDebugContext(int n)} {open private return_type void
  } {
    code {{
  n = (n >= 0 ? (n <= 5 ? n : 5) : 0);
  int   tmp = gui.vm.getDebugContext();
  if (n != tmp) {
    const char  *s = (char *) 0;
    try {
      s = bpEditBuffer->text();
      if (s) {
        breakPointLists[tmp] = s;
        std::free(const_cast<char *>(s));
        s = (char *) 0;
      }
      else
        breakPointLists[tmp] = "";
      gui.vm.setDebugContext(n);
      bpEditBuffer->text(breakPointLists[n].c_str());
    }
    catch (std::exception& e) {
      if (s)
        std::free(const_cast<char *>(s));
      gui.errorMessage(e.what());
    }
  }
}} {}
  }
} 
