# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "gui.hpp"} {selected
} 

class Plus4EmuGUI_MachineConfigWindow {open
} {
  decl {Plus4EmuGUI& gui;} {}
  Function {Plus4EmuGUI_MachineConfigWindow(Plus4EmuGUI& gui_) : gui(gui_)} {open
  } {
    Fl_Window window {
      label {Machine configuration}
      callback {{
  try {
    gui.applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
  window->hide();
}} open
      xywh {182 139 400 450} type Double color 37 visible
    } {
      Fl_Button {} {
        label Apply
        callback {{
  try {
    gui.applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
}}
        xywh {255 415 60 25} color 38 selection_color 39 labelcolor 52
      }
      Fl_Button {} {
        label OK
        callback {{
  try {
    gui.applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
  window->hide();
}}
        xywh {325 415 60 25} color 38 selection_color 39 labelcolor 52
      }
      Fl_Tabs {} {open
        xywh {10 10 380 395} color 38 selection_color 38 labelcolor 52
      } {
        Fl_Group {} {
          label General open
          xywh {10 35 380 370} color 38 selection_color 38 labelcolor 52
        } {
          Fl_Group {} {
            label {Clock frequency and timing settings} open
            xywh {20 45 360 100} box ENGRAVED_FRAME color 38 labelcolor 52 align 21
          } {
            Fl_Value_Input vmCPUFrequencyValuator {
              label {CPU frequency}
              callback {{
  try {
    gui.config["vm.cpuClockFrequency"] = (unsigned int) (o->clamp(o->value()) + 0.5);
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  o->value(double(gui.config.vm.cpuClockFrequency));
}}
              xywh {30 70 120 25} color 0 selection_color 238 labelcolor 52 align 8 when 4 minimum 1 maximum 1.5e+08 step 1 value 1 textcolor 52
              code0 {o->cursor_color(FL_YELLOW);}
            }
            Fl_Value_Input vmVideoFrequencyValuator {
              label {Video clock frequency (Hz)}
              callback {{
  try {
    gui.config["vm.videoClockFrequency"] = (unsigned int) (o->clamp(o->value()) + 0.5);
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
}}
              xywh {30 105 120 25} color 0 selection_color 238 labelcolor 52 align 8 when 4 minimum 7e+06 maximum 3.6e+07 step 1 value 1.77345e+07 textcolor 52
              code0 {o->cursor_color(FL_YELLOW);}
            }
          }
          Fl_Group {} {
            label {File I/O} open
            xywh {20 155 360 65} box ENGRAVED_FRAME color 38 labelcolor 52 align 21
          } {
            Fl_Light_Button vmEnableFileIOValuator {
              label {Enable virtual file I/O}
              callback {{
  gui.config.vm.enableFileIO = (o->value() != 0);
  gui.config.vmConfigurationChanged = true;
}}
              tooltip {If enabled, the emulated machine can directly access files in the working directory if the ROM module for this function is loaded (p4fileio.rom to segment 06)} xywh {30 180 240 25} color 39 labelcolor 52
            }
          }
          Fl_Group {} {
            label {Video capture settings} open
            xywh {20 230 360 65} box ENGRAVED_FRAME color 38 labelcolor 52 align 21
          } {
            Fl_Value_Input videoCaptureFrameRateValuator {
              label {Frame rate}
              callback {{
  gui.config.videoCapture.frameRate = int(o->clamp(o->value()) + 0.5);
  gui.config.videoCaptureSettingsChanged = true;
}}
              tooltip {Number of frames per second for video recording; the allowed settings are 24, 25, 30, 32, 40, 48, 50, and 60} xywh {30 255 120 25} color 0 selection_color 238 labelcolor 52 align 8 when 4 minimum 24 maximum 60 step 1 value 30 textcolor 52
              code0 {o->cursor_color(FL_YELLOW);}
            }
          }
        }
        Fl_Group {} {
          label Memory open
          xywh {10 35 380 370} color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Value_Input memoryRAMSizeValuator {
            label {RAM size in kilobytes}
            callback {{
  try {
    gui.config["memory.ram.size"] = int(o->clamp(o->value()) + 0.5);
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  o->value(double(gui.config.memory.ram.size));
}}
            xywh {20 45 120 25} color 0 selection_color 238 labelcolor 52 align 8 when 4 minimum 16 maximum 4096 step 16 value 64 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
          }
          Fl_Input memoryRAMStartupPatternValuator {
            label {RAM startup pattern code}
            callback {{
  if (o->value()) {
    try {
      gui.config["memory.ram.startupPattern"] = o->value();
    }
    catch (std::exception& e) {
      gui.errorMessage(e.what());
    }
  }
}}
            tooltip {The RAM startup pattern can be defined with a 12 digit hexadecimal number (see src/vm.hpp for details). Examples: 000088888888 (FF 00 FF 00 ...), 000099999999 (FF FF 00 00 ...), 01F70000E000 (plus4emu default), 00F70000E000 (plus4emu default, no random bytes), FF0076543210 (random bytes).} xywh {20 80 120 25} color 0 selection_color 238 labelcolor 52 align 8 textcolor 52
            code0 {o->cursor_color(FL_YELLOW);}
          }
          Fl_Scroll {} {
            label {ROM images} open
            xywh {20 130 360 265} box DOWN_BOX color 36 selection_color 40 labelcolor 52 align 5
          } {
            Fl_Group {} {open
              xywh {25 135 325 425} box FLAT_BOX color 36 labelcolor 52
            } {
              Fl_Box {} {
                label Segment
                xywh {30 139 75 20} color 36 labelcolor 52 align 20
              }
              Fl_Box {} {
                label {File name}
                xywh {110 139 80 20} color 36 labelcolor 52 align 20
              }
              Fl_Box {} {
                label {File offset}
                xywh {270 139 75 20} color 36 labelcolor 52 align 20
              }
              Fl_Box {} {
                label Basic
                xywh {25 165 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM00FileNameValuator {
                callback {{
  setROMImageFile(0x00, o->value());
}}
                xywh {75 165 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x00);
}}
                xywh {245 165 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM00OffsetValuator {
                callback {{
  gui.config.memory.rom[0x00].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x00].offset));
}}
                xywh {280 165 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label Kernal
                xywh {25 195 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM01FileNameValuator {
                callback {{
  setROMImageFile(0x01, o->value());
}}
                xywh {75 195 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x01);
}}
                xywh {245 195 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM01OffsetValuator {
                callback {{
  gui.config.memory.rom[0x01].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x01].offset));
}}
                xywh {280 195 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label FuncL
                xywh {25 225 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM02FileNameValuator {
                callback {{
  setROMImageFile(0x02, o->value());
}}
                xywh {75 225 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x02);
}}
                xywh {245 225 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM02OffsetValuator {
                callback {{
  gui.config.memory.rom[0x02].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x02].offset));
}}
                xywh {280 225 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label FuncH
                xywh {25 255 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM03FileNameValuator {
                callback {{
  setROMImageFile(0x03, o->value());
}}
                xywh {75 255 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x03);
}}
                xywh {245 255 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM03OffsetValuator {
                callback {{
  gui.config.memory.rom[0x03].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x03].offset));
}}
                xywh {280 255 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label C1L
                xywh {25 285 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM04FileNameValuator {
                callback {{
  setROMImageFile(0x04, o->value());
}}
                xywh {75 285 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x04);
}}
                xywh {245 285 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM04OffsetValuator {
                callback {{
  gui.config.memory.rom[0x04].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x04].offset));
}}
                xywh {280 285 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label C1H
                xywh {25 315 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM05FileNameValuator {
                callback {{
  setROMImageFile(0x05, o->value());
}}
                xywh {75 315 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x05);
}}
                xywh {245 315 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM05OffsetValuator {
                callback {{
  gui.config.memory.rom[0x05].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x05].offset));
}}
                xywh {280 315 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label C2L
                xywh {25 345 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM06FileNameValuator {
                callback {{
  setROMImageFile(0x06, o->value());
}}
                xywh {75 345 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x06);
}}
                xywh {245 345 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM06OffsetValuator {
                callback {{
  gui.config.memory.rom[0x06].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x06].offset));
}}
                xywh {280 345 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label C2H
                xywh {25 375 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM07FileNameValuator {
                callback {{
  setROMImageFile(0x07, o->value());
}}
                xywh {75 375 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x07);
}}
                xywh {245 375 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM07OffsetValuator {
                callback {{
  gui.config.memory.rom[0x07].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x07].offset));
}}
                xywh {280 375 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label 1526
                xywh {25 405 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM0CFileNameValuator {
                callback {{
  setROMImageFile(0x0C, o->value());
}}
                xywh {75 405 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x0C);
}}
                xywh {245 405 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM0COffsetValuator {
                callback {{
  gui.config.memory.rom[0x0C].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x0C].offset));
}}
                xywh {280 405 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label 1541
                xywh {25 435 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM10FileNameValuator {
                callback {{
  setROMImageFile(0x10, o->value());
}}
                xywh {75 435 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x10);
}}
                xywh {245 435 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM10OffsetValuator {
                callback {{
  gui.config.memory.rom[0x10].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x10].offset));
}}
                xywh {280 435 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label 1551
                xywh {25 465 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM20FileNameValuator {
                callback {{
  setROMImageFile(0x20, o->value());
}}
                xywh {75 465 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x20);
}}
                xywh {245 465 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM20OffsetValuator {
                callback {{
  gui.config.memory.rom[0x20].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x20].offset));
}}
                xywh {280 465 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label 1581L
                xywh {25 495 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM30FileNameValuator {
                callback {{
  setROMImageFile(0x30, o->value());
}}
                xywh {75 495 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x30);
}}
                xywh {245 495 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM30OffsetValuator {
                callback {{
  gui.config.memory.rom[0x30].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x30].offset));
}}
                xywh {280 495 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Box {} {
                label 1581H
                xywh {25 525 45 25} box BORDER_FRAME color 39 labelsize 12 labelcolor 52
              }
              Fl_Input memoryROM31FileNameValuator {
                callback {{
  setROMImageFile(0x31, o->value());
}}
                xywh {75 525 165 25} color 0 selection_color 238 labelcolor 52 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
              Fl_Button {} {
                label {...}
                callback {{
  browseROMImageFile(0x31);
}}
                xywh {245 525 25 25} color 38 selection_color 39 labelcolor 52
              }
              Fl_Value_Input memoryROM31OffsetValuator {
                callback {{
  gui.config.memory.rom[0x31].offset = int(o->clamp(o->value()) + 0.5);
  gui.config.memoryConfigurationChanged = true;
  o->value(double(gui.config.memory.rom[0x31].offset));
}}
                xywh {280 525 65 25} color 0 selection_color 238 labelcolor 52 when 4 maximum 999999 step 1 textcolor 52
                code0 {o->cursor_color(FL_YELLOW);}
              }
            }
          }
        }
        Fl_Group {} {
          label Tape open
          xywh {10 35 380 370} color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Group {} {
            label {General tape emulation settings} open
            xywh {20 45 360 135} box ENGRAVED_FRAME color 38 labelcolor 52 align 21
          } {
            Fl_Light_Button tapeEnableFastModeValuator {
              label {Enable fast tape mode}
              callback {{
  gui.config.tape.fastMode = (o->value() != 0);
  gui.config.tapeSettingsChanged = true;
}}
              tooltip {Allow the emulation to run faster than real time while recording or playing tape} xywh {30 70 240 25} color 39 labelcolor 52
            }
            Fl_Value_Input tapeDefaultSampleRateValuator {
              label {Default tape sample rate (Hz)}
              callback {{
  gui.config.tape.defaultSampleRate = int(o->clamp(o->value()) + 0.5);
  gui.config.tapeSettingsChanged = true;
  o->value(double(gui.config.tape.defaultSampleRate));
}}
              xywh {30 105 120 25} color 0 selection_color 238 labelcolor 52 align 8 when 4 minimum 10000 maximum 120000 step 1 value 24000 textcolor 52
              code0 {o->cursor_color(FL_YELLOW);}
            }
            Fl_Value_Slider tapeFeedbackLevelValuator {
              label {Tape signal to sound output}
              callback {{
  gui.config.tape.feedbackLevel =
      int(o->value() >= 0.0 ? (o->value() + 0.5) : (o->value() - 0.5));
  gui.config.tapeSettingsChanged = true;
}}
              tooltip {If non-zero, tape playback or recording is also sent to the sound output} xywh {30 140 120 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 minimum -10 maximum 10 step 1 textcolor 52
            }
          }
          Fl_Group {} {
            label {Sound file input} open
            xywh {20 190 360 100} box ENGRAVED_FRAME color 38 labelcolor 52 align 21
          } {
            Fl_Value_Input tapeChannelValuator {
              label {Channel number}
              callback {{
  gui.config.tape.soundFileChannel = int(o->clamp(o->value()) + 0.5);
  gui.config.tapeSoundFileSettingsChanged = true;
  o->value(double(gui.config.tape.soundFileChannel));
}}
              tooltip {Channel to use in multichannel sound files (for stereo files, channel 0 is left, and channel 1 is right)} xywh {30 215 40 25} color 0 selection_color 238 labelcolor 52 align 8 when 4 maximum 15 step 1 textcolor 52
              code0 {o->cursor_color(FL_YELLOW);}
            }
            Fl_Light_Button tapeEnableFilterValuator {
              label {Enable filter}
              callback {{
  gui.config.tape.enableSoundFileFilter = (o->value() != 0);
  gui.config.tapeSoundFileSettingsChanged = true;
}}
              tooltip {Apply a linear phase FIR bandpass filter to sound file input (enabling this increases CPU usage)} xywh {30 250 160 25} color 39 labelcolor 52
            }
            Fl_Value_Slider tapeMinFreqValuator {
              label {Min freq}
              callback {{
  gui.config.tape.soundFileFilterMinFreq = o->value();
  gui.config.tapeSoundFileSettingsChanged = true;
}}
              tooltip {The lowest frequency not attenuated by the bandpass filter (if enabled) in Hz} xywh {260 215 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 4 maximum 2000 step 1 value 500 textcolor 52
            }
            Fl_Value_Slider tapeMaxFreqValuator {
              label {Max freq}
              callback {{
  gui.config.tape.soundFileFilterMaxFreq = o->value();
  gui.config.tapeSoundFileSettingsChanged = true;
}}
              tooltip {The highest frequency not attenuated by the bandpass filter (if enabled) in Hz} xywh {260 250 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 4 minimum 1000 maximum 20000 step 10 value 5000 textcolor 52
            }
          }
        }
        Fl_Group {} {
          label SID open
          xywh {10 35 380 370} color 38 selection_color 38 labelcolor 52 hide
        } {
          Fl_Group {} {open
            xywh {20 45 360 95} box ENGRAVED_FRAME color 38 labelcolor 52 align 21
          } {
            Fl_Light_Button vmSIDModel6581Valuator {
              label {6581 emulation}
              callback {{
  gui.config.vm.sidModel6581 = (o->value() != 0);
  gui.config.vmConfigurationChanged = true;
}}
              tooltip {The MOS 6581 is emulated if this button is checked, and the MOS 8580 otherwise, if SID emulation is enabled} xywh {30 60 240 25} color 39 labelcolor 52
            }
            Fl_Light_Button vmSIDDigiBlasterValuator {
              label {Enable Digi-Blaster}
              callback {{
  gui.config.vm.sidDigiBlaster = (o->value() != 0);
  gui.config.vmConfigurationChanged = true;
}}
              xywh {30 100 240 25} color 39 labelcolor 52
            }
          }
        }
      }
    }
  }
  Function {~Plus4EmuGUI_MachineConfigWindow()} {open
  } {
    code {{
  delete window;
}} {}
  }
  Function {show()} {open return_type void
  } {
    code {{
  updateWindow();
  window->show();
}} {}
  }
  Function {shown()} {open return_type bool
  } {
    code {{
  return bool(window->shown());
}} {}
  }
  Function {hide()} {open return_type void
  } {
    code {{
  window->hide();
}} {}
  }
  Function {updateWindow()} {open return_type void
  } {
    code {{
  vmCPUFrequencyValuator->value(double(gui.config.vm.cpuClockFrequency));
  vmVideoFrequencyValuator->value(double(gui.config.vm.videoClockFrequency));
  vmEnableFileIOValuator->value(gui.config.vm.enableFileIO ? 1 : 0);
  videoCaptureFrameRateValuator->value(double(gui.config.videoCapture.frameRate));
  memoryRAMSizeValuator->value(double(gui.config.memory.ram.size));
  memoryRAMStartupPatternValuator->value(gui.config.memory.ram.startupPattern.c_str());
  memoryROM00FileNameValuator->value(gui.config.memory.rom[0x00].file.c_str());
  memoryROM00OffsetValuator->value(double(gui.config.memory.rom[0x00].offset));
  memoryROM01FileNameValuator->value(gui.config.memory.rom[0x01].file.c_str());
  memoryROM01OffsetValuator->value(double(gui.config.memory.rom[0x01].offset));
  memoryROM02FileNameValuator->value(gui.config.memory.rom[0x02].file.c_str());
  memoryROM02OffsetValuator->value(double(gui.config.memory.rom[0x02].offset));
  memoryROM03FileNameValuator->value(gui.config.memory.rom[0x03].file.c_str());
  memoryROM03OffsetValuator->value(double(gui.config.memory.rom[0x03].offset));
  memoryROM04FileNameValuator->value(gui.config.memory.rom[0x04].file.c_str());
  memoryROM04OffsetValuator->value(double(gui.config.memory.rom[0x04].offset));
  memoryROM05FileNameValuator->value(gui.config.memory.rom[0x05].file.c_str());
  memoryROM05OffsetValuator->value(double(gui.config.memory.rom[0x05].offset));
  memoryROM06FileNameValuator->value(gui.config.memory.rom[0x06].file.c_str());
  memoryROM06OffsetValuator->value(double(gui.config.memory.rom[0x06].offset));
  memoryROM07FileNameValuator->value(gui.config.memory.rom[0x07].file.c_str());
  memoryROM07OffsetValuator->value(double(gui.config.memory.rom[0x07].offset));
  memoryROM0CFileNameValuator->value(gui.config.memory.rom[0x0C].file.c_str());
  memoryROM0COffsetValuator->value(double(gui.config.memory.rom[0x0C].offset));
  memoryROM10FileNameValuator->value(gui.config.memory.rom[0x10].file.c_str());
  memoryROM10OffsetValuator->value(double(gui.config.memory.rom[0x10].offset));
  memoryROM20FileNameValuator->value(gui.config.memory.rom[0x20].file.c_str());
  memoryROM20OffsetValuator->value(double(gui.config.memory.rom[0x20].offset));
  memoryROM30FileNameValuator->value(gui.config.memory.rom[0x30].file.c_str());
  memoryROM30OffsetValuator->value(double(gui.config.memory.rom[0x30].offset));
  memoryROM31FileNameValuator->value(gui.config.memory.rom[0x31].file.c_str());
  memoryROM31OffsetValuator->value(double(gui.config.memory.rom[0x31].offset));
  tapeEnableFastModeValuator->value(gui.config.tape.fastMode ? 1 : 0);
  tapeDefaultSampleRateValuator->value(double(gui.config.tape.defaultSampleRate));
  tapeFeedbackLevelValuator->value(double(gui.config.tape.feedbackLevel));
  tapeChannelValuator->value(double(gui.config.tape.soundFileChannel));
  tapeEnableFilterValuator->value(gui.config.tape.enableSoundFileFilter ? 1 : 0);
  tapeMinFreqValuator->value(gui.config.tape.soundFileFilterMinFreq);
  tapeMaxFreqValuator->value(gui.config.tape.soundFileFilterMaxFreq);
  vmSIDModel6581Valuator->value(gui.config.vm.sidModel6581 ? 1 : 0);
  vmSIDDigiBlasterValuator->value(gui.config.vm.sidDigiBlaster ? 1 : 0);
}} {}
  }
  Function {setROMImageFile(uint8_t segment_, const std::string& fileName_)} {open private return_type void
  } {
    code {{
  try {
    char    cfgVarName[24];
    std::sprintf(&(cfgVarName[0]), "memory.rom.%02X.file", (unsigned int) segment_);
    Plus4Emu::ConfigurationDB::ConfigurationVariable& cv = gui.config[&(cfgVarName[0])];
    bool    wasEmpty = (std::string(cv).length() <= 0);
    cv = fileName_;
    std::string fName = std::string(cv);
    if (fName.length() > 0) {
      std::FILE *f = std::fopen(fName.c_str(), "rb");
      long    fSize = 0L;
      if (f) {
        if (std::fseek(f, 0L, SEEK_END) >= 0)
          fSize = std::ftell(f);
        std::fclose(f);
        f = (std::FILE *) 0;
      }
      long    offs = long(gui.config.memory.rom[segment_].offset);
      bool    updateFlag = false;
      while ((offs + 32767L) < fSize &&
             segment_ != 0x07 && segment_ != 0x0C &&
             segment_ != 0x10 && segment_ != 0x20 && segment_ != 0x31) {
        segment_++;
        offs = offs + 16384L;
        updateFlag = true;
        gui.config.memory.rom[segment_].offset = int(offs);
        std::sprintf(&(cfgVarName[0]), "memory.rom.%02X.file", (unsigned int) segment_);
        gui.config[&(cfgVarName[0])] = fName;
      }
      if (updateFlag)
        updateWindow();
    }
    else if (!wasEmpty) {
      if (gui.config.memory.rom[segment_].offset != 0) {
        gui.config.memory.rom[segment_].offset = 0;
        updateWindow();
      }
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}} {}
  }
  Function {browseROMImageFile(uint8_t segment_)} {open private return_type void
  } {
    code {{
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.romImageDirectory,
                       "ROM image files (*.rom)",
                       Fl_File_Chooser::SINGLE,
                       "Select ROM image file")) {
      setROMImageFile(segment_, tmp);
      switch (segment_) {
      case 0x00:
        memoryROM00FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x01:
        memoryROM01FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x02:
        memoryROM02FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x03:
        memoryROM03FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x04:
        memoryROM04FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x05:
        memoryROM05FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x06:
        memoryROM06FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x07:
        memoryROM07FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x0C:
        memoryROM0CFileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x10:
        memoryROM10FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x20:
        memoryROM20FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x30:
        memoryROM30FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      case 0x31:
        memoryROM31FileNameValuator->value(gui.config.memory.rom[segment_].file.c_str());
        break;
      }
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}} {}
  }
} 
