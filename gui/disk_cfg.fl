# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "gui.hpp"} {selected
} 

class Plus4EmuGUI_DiskConfigWindow {open
} {
  decl {Plus4EmuGUI& gui;} {}
  Function {Plus4EmuGUI_DiskConfigWindow(Plus4EmuGUI& gui_) : gui(gui_)} {open
  } {
    Fl_Window window {
      label {Floppy configuration}
      callback {{
  try {
    gui.applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
  window->hide();
}} open
      xywh {204 187 400 435} type Double color 48 visible
    } {
      Fl_Group {} {open
        xywh {10 10 380 380} box THIN_UP_BOX
      } {
        Fl_Group {} {
          label {Unit 8} open
          xywh {20 20 360 100} box THIN_UP_BOX align 21
        } {
          Fl_Input floppyAImageFileValuator {
            callback {{
  try {
    gui.config["floppy.a.imageFile"] = o->value();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            tooltip {File names like /dev/fd0u800 (Linux) or \\\\.\\A: (Windows) can be used for direct access to actual floppy disks; leave the file name blank to have no disk emulated in this drive} xywh {30 45 230 25}
            code0 {o->cursor_color(Fl_Color(3));}
          }
          Fl_Button {} {
            label {@fileopen}
            callback {{
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.diskImageDirectory,
                       "Disk image files\\t*.{d64,d81,zip}",
                       Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
                       "Select disk image file")) {
      gui.config["floppy.a.imageFile"] = tmp;
      floppyAImageFileValuator->value(tmp.c_str());
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {265 45 25 25} color 50 selection_color 51 labelcolor 3
          }
          Fl_Box {} {
            label {Image file}
            xywh {300 45 70 25} align 20
          }
          Fl_Choice floppyADriveTypeValuator {
            callback {{
  try {
    gui.config["floppy.a.driveType"] = o->value();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  o->value(gui.config.floppy.a.driveType);
}} open
            xywh {30 80 80 25} down_box BORDER_BOX align 8
            code0 {o->add("1541|1551");}
            code1 {o->value(gui.config.floppy.a.driveType);}
          } {}
          Fl_Box {} {
            label {Drive type for D64 files}
            xywh {120 80 170 25} align 20
          }
          Fl_Button {} {
            label Disable
            callback {{
  gui.menuCallback_Options_FloppyRmA((Fl_Widget *) 0, &gui);
  gui.menuCallback_Options_FloppyGC((Fl_Widget *) 0, &gui);
}}
            xywh {300 80 70 25} color 50 selection_color 50
          }
        }
        Fl_Group {} {
          label {Unit 9} open
          xywh {20 130 360 100} box THIN_UP_BOX align 21
        } {
          Fl_Input floppyBImageFileValuator {
            callback {{
  try {
    gui.config["floppy.b.imageFile"] = o->value();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            tooltip {File names like /dev/fd0u800 (Linux) or \\\\.\\A: (Windows) can be used for direct access to actual floppy disks; leave the file name blank to have no disk emulated in this drive} xywh {30 155 230 25}
            code0 {o->cursor_color(Fl_Color(3));}
          }
          Fl_Button {} {
            label {@fileopen}
            callback {{
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.diskImageDirectory,
                       "Disk image files\\t*.{d64,d81,zip}",
                       Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
                       "Select disk image file")) {
      gui.config["floppy.b.imageFile"] = tmp;
      floppyBImageFileValuator->value(tmp.c_str());
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {265 155 25 25} color 50 selection_color 51 labelcolor 3
          }
          Fl_Box {} {
            label {Image file}
            xywh {300 155 70 25} align 20
          }
          Fl_Choice floppyBDriveTypeValuator {
            callback {{
  try {
    gui.config["floppy.b.driveType"] = o->value();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  o->value(gui.config.floppy.b.driveType);
}} open
            xywh {30 190 80 25} down_box BORDER_BOX align 8
            code0 {o->add("1541|1551");}
            code1 {o->value(gui.config.floppy.b.driveType);}
          } {}
          Fl_Box {} {
            label {Drive type for D64 files}
            xywh {120 190 170 25} align 20
          }
          Fl_Button {} {
            label Disable
            callback {{
  gui.menuCallback_Options_FloppyRmB((Fl_Widget *) 0, &gui);
  gui.menuCallback_Options_FloppyGC((Fl_Widget *) 0, &gui);
}}
            xywh {300 190 70 25} color 50 selection_color 50
          }
        }
        Fl_Group {} {
          label {Unit 10} open
          xywh {20 240 360 65} box THIN_UP_BOX align 21
        } {
          Fl_Input floppyCImageFileValuator {
            callback {{
  try {
    gui.config["floppy.c.imageFile"] = o->value();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            tooltip {File names like /dev/fd0u800 (Linux) or \\\\.\\A: (Windows) can be used for direct access to actual floppy disks; leave the file name blank to have no disk emulated in this drive} xywh {30 265 230 25}
            code0 {o->cursor_color(Fl_Color(3));}
          }
          Fl_Button {} {
            label {@fileopen}
            callback {{
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.diskImageDirectory,
                       "Disk image files\\t*.{d64,d81,zip}",
                       Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
                       "Select disk image file")) {
      gui.config["floppy.c.imageFile"] = tmp;
      floppyCImageFileValuator->value(tmp.c_str());
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {265 265 25 25} color 50 selection_color 51 labelcolor 3
          }
          Fl_Box {} {
            label {Image file}
            xywh {300 265 70 25} align 20
          }
        }
        Fl_Group {} {
          label {Unit 11} open
          xywh {20 315 360 65} box THIN_UP_BOX align 21
        } {
          Fl_Input floppyDImageFileValuator {
            callback {{
  try {
    gui.config["floppy.d.imageFile"] = o->value();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            tooltip {File names like /dev/fd0u800 (Linux) or \\\\.\\A: (Windows) can be used for direct access to actual floppy disks; leave the file name blank to have no disk emulated in this drive} xywh {30 340 230 25}
            code0 {o->cursor_color(Fl_Color(3));}
          }
          Fl_Button {} {
            label {@fileopen}
            callback {{
  try {
    std::string tmp;
    if (gui.browseFile(tmp, gui.diskImageDirectory,
                       "Disk image files\\t*.{d64,d81,zip}",
                       Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
                       "Select disk image file")) {
      gui.config["floppy.d.imageFile"] = tmp;
      floppyDImageFileValuator->value(tmp.c_str());
    }
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
}}
            xywh {265 340 25 25} color 50 selection_color 51 labelcolor 3
          }
          Fl_Box {} {
            label {Image file}
            xywh {300 340 70 25} align 20
          }
        }
      }
      Fl_Light_Button floppyTimingAccuracyValuator {
        label {1541 high timing accuracy}
        callback {{
  gui.config.floppy.highTimingAccuracy = (o->value() != 0);
  gui.config.floppyTimingAccuracyChanged = true;
}}
        tooltip {Use higher 1541 timing resolution to fix some fast loaders (enabling this increases CPU usage)} xywh {15 400 200 25} selection_color 3
      }
      Fl_Button {} {
        label Apply
        callback {{
  try {
    gui.applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
}}
        xywh {255 400 60 25} selection_color 50
      }
      Fl_Button {} {
        label OK
        callback {{
  try {
    gui.applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    gui.errorMessage(e.what());
  }
  updateWindow();
  window->hide();
}}
        xywh {325 400 60 25} selection_color 50
      }
    }
  }
  Function {~Plus4EmuGUI_DiskConfigWindow()} {open
  } {
    code {{
  delete window;
}} {}
  }
  Function {show()} {open return_type void
  } {
    code {{
  updateWindow();
  window->show();
}} {}
  }
  Function {shown()} {open return_type bool
  } {
    code {{
  return bool(window->shown());
}} {}
  }
  Function {hide()} {open return_type void
  } {
    code {{
  window->hide();
}} {}
  }
  Function {updateWindow()} {open return_type void
  } {
    code {{
  floppyAImageFileValuator->value(gui.config.floppy.a.imageFile.c_str());
  floppyADriveTypeValuator->value(gui.config.floppy.a.driveType);
  floppyBImageFileValuator->value(gui.config.floppy.b.imageFile.c_str());
  floppyBDriveTypeValuator->value(gui.config.floppy.b.driveType);
  floppyCImageFileValuator->value(gui.config.floppy.c.imageFile.c_str());
  floppyDImageFileValuator->value(gui.config.floppy.d.imageFile.c_str());
  floppyTimingAccuracyValuator->value(gui.config.floppy.highTimingAccuracy ? 1 : 0);
}} {}
  }
} 
