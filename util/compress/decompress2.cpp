
// compressor utility for Commodore Plus/4 programs
// Copyright (C) 2007-2008 Istvan Varga <istvanv@users.sourceforge.net>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Plus/4 program files generated by this utility are not covered by the
// GNU General Public License, and can be used, modified, and distributed
// without any restrictions.

#include "plus4emu.hpp"
#include "compress.hpp"
#include "decompress2.hpp"
#include <vector>

namespace Plus4Compress {

  unsigned int Decompressor_M2::readBits(size_t nBits)
  {
    unsigned int  retval = 0U;
    for (size_t i = 0; i < nBits; i++) {
      if (shiftRegisterCnt < 1) {
        if (inputBufferPosition >= inputBufferSize)
          throw Plus4Emu::Exception("unexpected end of compressed data");
        shiftRegister = inputBuffer[inputBufferPosition];
        shiftRegisterCnt = 8;
        inputBufferPosition++;
      }
      retval = (retval << 1) | (unsigned int) ((shiftRegister >> 7) & 0x01);
      shiftRegister = (shiftRegister & 0x7F) << 1;
      shiftRegisterCnt--;
    }
    return retval;
  }

  unsigned char Decompressor_M2::readLiteralByte()
  {
    if (inputBufferPosition >= inputBufferSize)
      throw Plus4Emu::Exception("unexpected end of compressed data");
    unsigned char retval = inputBuffer[inputBufferPosition];
    inputBufferPosition++;
    return retval;
  }

  unsigned int Decompressor_M2::readMatchLength()
  {
    unsigned int  slotNum = 0U;
    do {
      if (readBits(1) == 0U)
        break;
      slotNum++;
    } while (slotNum < 9U);
    if (slotNum == 0U)                  // literal byte
      return 0U;
    if (slotNum == 9U)                  // literal sequence
      return (readBits(8) + 0x80000011U);
    return (readLZMatchParameter((unsigned char) (slotNum - 1U),
                                 &(lengthDecodeTable[0])) + 1U);
  }

  unsigned int Decompressor_M2::readLZMatchParameter(
      unsigned char slotNum, const unsigned int *decodeTable)
  {
    unsigned int  retval = decodeTable[int(slotNum) * 2 + 1];
    retval += readBits(size_t(decodeTable[int(slotNum) * 2 + 0]));
    return retval;
  }

  void Decompressor_M2::readDecodeTables()
  {
    unsigned int  tmp = 0U;
    unsigned int  *tablePtr = &(lengthDecodeTable[0]);
    offs3PrefixSize = size_t(readBits(2)) + 2;
    size_t  offs3NumSlots = size_t(1) << offs3PrefixSize;
    for (size_t i = 0; i < (8 + 4 + 8 + offs3NumSlots); i++) {
      if (i == 8) {
        tmp = 0U;
        tablePtr = &(offs1DecodeTable[0]);
      }
      else if (i == (8 + 4)) {
        tmp = 0U;
        tablePtr = &(offs2DecodeTable[0]);
      }
      else if (i == (8 + 4 + 8)) {
        tmp = 0U;
        tablePtr = &(offs3DecodeTable[0]);
      }
      tablePtr[0] = readBits(4);
      tablePtr[1] = tmp;
      tmp = tmp + (1U << tablePtr[0]);
      tablePtr = tablePtr + 2;
    }
  }

  bool Decompressor_M2::decompressDataBlock(std::vector< unsigned char >& buf,
                                            std::vector< bool >& bytesUsed)
  {
    unsigned int  startAddr = readBits(16);
    unsigned int  nSymbols = readBits(16) + 1U;
    bool    isLastBlock = readBits(1);
    bool    compressionEnabled = readBits(1);
    if (!compressionEnabled) {
      // copy uncompressed data
      for (unsigned int i = 0U; i < nSymbols; i++) {
        if (startAddr > 0xFFFFU || bytesUsed[startAddr])
          throw Plus4Emu::Exception("error in compressed data");
        buf[startAddr] = readLiteralByte();
        bytesUsed[startAddr] = true;
        startAddr++;
      }
      return isLastBlock;
    }
    readDecodeTables();
    for (unsigned int i = 0U; i < nSymbols; i++) {
      unsigned int  matchLength = readMatchLength();
      if (matchLength == 0U) {
        // literal byte
        if (startAddr > 0xFFFFU || bytesUsed[startAddr])
          throw Plus4Emu::Exception("error in compressed data");
        buf[startAddr] = readLiteralByte();
        bytesUsed[startAddr] = true;
        startAddr++;
      }
      else if (matchLength >= 0x80000000U) {
        // literal sequence
        matchLength &= 0x7FFFFFFFU;
        while (matchLength > 0U) {
          if (startAddr > 0xFFFFU || bytesUsed[startAddr])
            throw Plus4Emu::Exception("error in compressed data");
          buf[startAddr] = readLiteralByte();
          bytesUsed[startAddr] = true;
          startAddr++;
          matchLength--;
        }
      }
      else {
        if (matchLength > 65535U)
          throw Plus4Emu::Exception("error in compressed data");
        // get match offset:
        unsigned int  offs = 0U;
        if (matchLength == 1U) {
          unsigned int  slotNum = readBits(2);
          offs = readLZMatchParameter((unsigned char) slotNum,
                                      &(offs1DecodeTable[0]));
        }
        else if (matchLength == 2U) {
          unsigned int  slotNum = readBits(3);
          offs = readLZMatchParameter((unsigned char) slotNum,
                                      &(offs2DecodeTable[0]));
        }
        else {
          unsigned int  slotNum = readBits(offs3PrefixSize);
          offs = readLZMatchParameter((unsigned char) slotNum,
                                      &(offs3DecodeTable[0]));
        }
        if (offs >= 0xFFFFU || offs >= startAddr)
          throw Plus4Emu::Exception("error in compressed data");
        offs++;
        unsigned int  lzMatchReadAddr = (startAddr - offs) & 0xFFFFU;
        for (unsigned int j = 0U; j < matchLength; j++) {
          if (!bytesUsed[lzMatchReadAddr])  // byte does not exist yet
            throw Plus4Emu::Exception("error in compressed data");
          if (startAddr > 0xFFFFU || bytesUsed[startAddr])
            throw Plus4Emu::Exception("error in compressed data");
          buf[startAddr] = buf[lzMatchReadAddr];
          bytesUsed[startAddr] = true;
          startAddr++;
          lzMatchReadAddr = (lzMatchReadAddr + 1U) & 0xFFFFU;
        }
      }
    }
    return isLastBlock;
  }

  // --------------------------------------------------------------------------

  Decompressor_M2::Decompressor_M2()
    : Decompressor(),
      offs3PrefixSize(2),
      shiftRegister(0x00),
      shiftRegisterCnt(0),
      inputBuffer((unsigned char *) 0),
      inputBufferSize(0),
      inputBufferPosition(0)
  {
  }

  Decompressor_M2::~Decompressor_M2()
  {
  }

  void Decompressor_M2::decompressData(
      std::vector< std::vector< unsigned char > >& outBuf,
      const std::vector< unsigned char >& inBuf)
  {
    outBuf.clear();
    if (inBuf.size() < 1)
      return;
    bool    startPosTable[1024];
    for (size_t i = 0; i < 1024; i++)
      startPosTable[i] = false;
    unsigned char crcValue = 0xFF;
    // find possible start offsets of compressed data
    for (size_t i = inBuf.size(); i > 0; ) {
      i--;
      crcValue = crcValue ^ inBuf[i];
      crcValue = ((crcValue & 0x7F) << 1) | ((crcValue & 0x80) >> 7);
      crcValue = (crcValue + 0xAC) & 0xFF;
      if (crcValue == 0x80) {
        if (i < 64 || (i >= 416 && i < 832))
          startPosTable[i] = true;
      }
    }
    std::vector< unsigned char >  tmpBuf;
    std::vector< bool > bytesUsed;
    tmpBuf.resize(65536);
    bytesUsed.resize(65536);
    bool    doneFlag = false;
    for (size_t i = 0; i < 1024; i++) {
      if (!startPosTable[i])
        continue;
      for (size_t j = 0; j < 65536; j++) {
        tmpBuf[j] = 0x00;
        bytesUsed[j] = false;
      }
      // if found a position where the checksum matches, try to decompress data
      inputBuffer = &(inBuf.front());
      inputBufferSize = inBuf.size();
      inputBufferPosition = i + 1;
      shiftRegister = 0x00;
      shiftRegisterCnt = 0;
      try {
        while (!decompressDataBlock(tmpBuf, bytesUsed))
          ;
        // on successful decompression, all input data must be consumed
        if (!(inputBufferPosition >= inputBufferSize && shiftRegister == 0x00))
          throw Plus4Emu::Exception("error in compressed data");
        doneFlag = true;
      }
      catch (Plus4Emu::Exception) {
      }
      if (doneFlag)
        break;
    }
    if (!doneFlag)
      throw Plus4Emu::Exception("error in compressed data");
    unsigned int  startPos = 0U;
    size_t        nBytes = 0;
    // find all data blocks
    for (size_t i = 0; i <= 65536; i++) {
      if (i >= 65536 || !bytesUsed[i]) {
        if (nBytes > 0) {
          std::vector< unsigned char >  newBuf;
          newBuf.push_back((unsigned char) (startPos & 0xFFU));
          newBuf.push_back((unsigned char) ((startPos >> 8) & 0xFFU));
          for (size_t j = 0U; j < nBytes; j++)
            newBuf.push_back(tmpBuf[startPos + j]);
          outBuf.push_back(newBuf);
        }
        startPos = (unsigned int) (i + 1);
        nBytes = 0;
      }
      else {
        nBytes++;
      }
    }
  }

  // --------------------------------------------------------------------------

  const unsigned char Decompressor_M2::sfxModuleLibrary[3033] = {
    0x4E, 0x00, 0x00, 0x04, 0x1B, 0x61, 0x26, 0x87, 0x00, 0x01, 0x00, 0x25,
    0x43, 0x36, 0x68, 0x66, 0x78, 0x43, 0x22, 0x31, 0x32, 0xA9, 0xBC, 0xC0,
    0x00, 0x02, 0xE8, 0x01, 0x84, 0x03, 0xE6, 0x90, 0xCE, 0x05, 0xCF, 0x90,
    0x9D, 0x07, 0xD5, 0x90, 0x72, 0x09, 0xDF, 0x90, 0x51, 0x0B, 0xDD, 0x90,
    0x2E, 0x0D, 0xC6, 0x90, 0xF4, 0x0E, 0xCC, 0x90, 0xC0, 0x10, 0xF3, 0x90,
    0xB3, 0x12, 0xF1, 0x90, 0xA4, 0x14, 0xDA, 0x90, 0x7E, 0x16, 0xE0, 0x90,
    0x5E, 0x18, 0xEA, 0x91, 0x48, 0x1A, 0x53, 0x12, 0x30, 0x1C, 0xD1, 0x80,
    0x1E, 0xD7, 0x88, 0xD8, 0x1F, 0xF6, 0xAD, 0x92, 0x21, 0xF4, 0x2A, 0xC2,
    0x23, 0x62, 0x9F, 0x25, 0xE3, 0x42, 0x82, 0x27, 0xED, 0x42, 0x6F, 0x29,
    0xEB, 0x42, 0x5A, 0x2B, 0xD4, 0xC0, 0xD5, 0x2D, 0x32, 0x08, 0x2F, 0xBE,
    0xFB, 0x57, 0x30, 0xCA, 0xEC, 0x32, 0x16, 0xC6, 0x57, 0x34, 0xCA, 0xA6,
    0x36, 0xF9, 0x90, 0x38, 0x5F, 0x2B, 0x78, 0x3A, 0xE5, 0x49, 0x3C, 0x7C,
    0x20, 0x3E, 0xAB, 0x8B, 0xFD, 0x3F, 0xDB, 0x07, 0x24, 0x41, 0xC4, 0x9C,
    0x24, 0x43, 0xCA, 0x66, 0x55, 0x45, 0xC4, 0x3A, 0x47, 0xD2, 0x84, 0x0C,
    0x49, 0xBB, 0x84, 0xC7, 0x4A, 0xC1, 0x8A, 0x88, 0x4C, 0x6C, 0x70, 0x4E,
    0xB5, 0xF2, 0x56, 0x50, 0xD7, 0xCB, 0x25, 0x52, 0x5F, 0x2D, 0xFA, 0x53,
    0x7C, 0xD9, 0x55, 0xA9, 0x96, 0xB6, 0x57, 0xBE, 0x7C, 0x2D, 0x59, 0xCC,
    0x2D, 0x5B, 0x65, 0x62, 0x33, 0x5D, 0xE9, 0x45, 0x1C, 0x5F, 0x4C, 0xEE,
    0x60, 0x59, 0xD8, 0x19, 0x62, 0xE2, 0x21, 0xA8, 0x64, 0xE0, 0x57, 0x2E,
    0x66, 0xC9, 0x07, 0x54, 0x68, 0xCA, 0x20, 0x6A, 0xF9, 0x08, 0x6C, 0x5F,
    0x28, 0xEE, 0x6D, 0x59, 0xBD, 0x6F, 0x5F, 0x2B, 0x92, 0x71, 0xF1, 0x57,
    0x73, 0xCA, 0x4E, 0x75, 0xF9, 0x14, 0x77, 0x5F, 0x2A, 0xE0, 0x78, 0x62,
    0xB8, 0x7A, 0xD6, 0x42, 0x8E, 0x7C, 0xBF, 0x42, 0x4D, 0x7E, 0xC5, 0x45,
    0x12, 0x80, 0x2E, 0xE1, 0x24, 0x81, 0xCD, 0xAE, 0x24, 0x83, 0xB6, 0x64,
    0x2B, 0x85, 0xBC, 0xE4, 0x87, 0xE3, 0x84, 0x03, 0x89, 0xE1, 0x85, 0xE4,
    0x8A, 0xCA, 0x13, 0x2E, 0x8C, 0xD0, 0x43, 0x24, 0x8E, 0xDA, 0x58, 0x54,
    0x90, 0xCB, 0x30, 0x92, 0x5B, 0x15, 0xF1, 0x93, 0xC7, 0xB5, 0x95, 0x8D,
    0x8B, 0x9E, 0x97, 0xE4, 0x8D, 0xD5, 0x99, 0x31, 0x4F, 0x9B, 0xD3, 0x22,
    0x22, 0x9D, 0xC6, 0xC4, 0xFF, 0x9E, 0xDB, 0x85, 0xDA, 0xA0, 0xC4, 0x17,
    0x54, 0xA2, 0xCA, 0x68, 0xA4, 0xF9, 0x4B, 0xA6, 0x5F, 0x28, 0x2C, 0xA8,
    0x59, 0xF6, 0xA9, 0x5F, 0x2B, 0xC6, 0xAB, 0xE5, 0xA0, 0xAD, 0x7C, 0x78,
    0xAF, 0xAF, 0x95, 0x39, 0xB1, 0xF2, 0x00, 0xB3, 0xAF, 0x09, 0xB4, 0xCB,
    0x22, 0x98, 0xB6, 0x64, 0x84, 0x4C, 0xB8, 0xBA, 0x91, 0x06, 0xAB, 0x89,
    0xCA, 0xBB, 0xC2, 0x09, 0x8C, 0xBD, 0xAB, 0x0B, 0x37, 0xBF, 0xB1, 0xB6,
    0xD4, 0xC0, 0xDC, 0x56, 0xC2, 0xBE, 0x96, 0x5A, 0xC4, 0xF9, 0x55, 0xC6,
    0x6B, 0xE5, 0x1A, 0xC8, 0xAF, 0x95, 0xE9, 0xC9, 0x32, 0xB6, 0xCB, 0x19,
    0x27, 0x6C, 0x5A, 0xF8, 0x28, 0xCF, 0xDB, 0xB5, 0xF2, 0xD1, 0xD9, 0x45,
    0xDC, 0xD2, 0x4C, 0x9E, 0xD4, 0x5C, 0xC8, 0xFE, 0xD6, 0x48, 0xD2, 0x38,
    0xD8, 0xB2, 0x71, 0x08, 0xDA, 0xB9, 0x22, 0xC1, 0xDB, 0xA6, 0x80, 0x57,
    0xDD, 0xCA, 0x58, 0xDF, 0xF9, 0x2E, 0xE1, 0x42, 0xCA, 0xED, 0xE2, 0xF9,
    0xB2, 0xE4, 0x5F, 0x2B, 0x81, 0xE6, 0xE5, 0x4E, 0xE8, 0x7C, 0x04, 0xEA,
    0xAF, 0xC0, 0x10, 0x42, 0x0B, 0x0A, 0x08, 0x00, 0x9E, 0x34, 0x31, 0x13,
    0x37, 0x78, 0x30, 0x02, 0xE5, 0x4F, 0xFB, 0x5C, 0xA2, 0xAC, 0xBD, 0x8F,
    0x10, 0x9D, 0x2F, 0x01, 0xBD, 0x3A, 0x11, 0x9D, 0x34, 0x03, 0xCA, 0xD0,
    0xF1, 0xCA, 0x9A, 0xE8, 0xB5, 0x02, 0x48, 0xE0, 0x09, 0x90, 0xF8, 0xA2,
    0x00, 0xAD, 0x06, 0xFF, 0x8E, 0x06, 0xFF, 0x48, 0x8E, 0x3F, 0xFF, 0xCA,
    0x86, 0x08, 0xA5, 0x9D, 0xE9, 0xE7, 0xA8, 0xA9, 0xE7, 0x85, 0x02, 0x8A,
    0x65, 0x9E, 0x85, 0x03, 0x98, 0x49, 0xFF, 0x65, 0x37, 0x85, 0x04, 0x8D,
    0x4E, 0x01, 0x8A, 0x65, 0x38, 0xAA, 0x98, 0xF0, 0x11, 0x86, 0x05, 0x88,
    0xB1, 0x02, 0x91, 0x04, 0x45, 0x08, 0x0A, 0x69, 0xAC, 0x85, 0x08, 0x98,
    0xD0, 0xF1, 0xC6, 0x03, 0xCA, 0xA5, 0x03, 0xC9, 0x10, 0xD0, 0xE6, 0xE8,
    0x8E, 0x4F, 0x01, 0xA9, 0x80, 0xC5, 0x08, 0xD0, 0x06, 0x20, 0x33, 0x01,
    0x4C, 0xCD, 0x03, 0x8C, 0x3E, 0xFF, 0x6C, 0xFC, 0xFF, 0xA9, 0x40, 0x2C,
    0x6E, 0x45, 0xA2, 0x82, 0x03, 0x20, 0x40, 0x70, 0x2A, 0x90, 0xF6, 0x0B,
    0x60, 0x85, 0x0A, 0xEE, 0x0B, 0xA1, 0xB3, 0x29, 0xB0, 0xA5, 0x09, 0x48,
    0xAD, 0x40, 0xFF, 0x85, 0x9A, 0x68, 0x13, 0x90, 0x2B, 0x2A, 0x6C, 0xD8,
    0x0A, 0x60, 0xE0, 0x02, 0x51, 0x90, 0x05, 0xE8, 0x81, 0xAC, 0xF2, 0x09,
    0x8A, 0xF0, 0x0B, 0xCA, 0xAC, 0x39, 0x08, 0xA2, 0x69, 0x0F, 0xCD, 0xE9,
    0x01, 0x0B, 0xE8, 0xE6, 0x10, 0x90, 0xC4, 0xB1, 0x06, 0xB3, 0xA0, 0xCA,
    0xF0, 0x09, 0xC8, 0x08, 0xD0, 0xF4, 0xE6, 0x05, 0x53, 0x07, 0x44, 0xEE,
    0xC6, 0x0B, 0x80, 0xF3, 0x98, 0xA0, 0x00, 0x38, 0x65, 0x5B, 0x04, 0x19,
    0x90, 0x02, 0x44, 0xD2, 0xC6, 0x2D, 0xD0, 0xB9, 0x42, 0x40, 0xB5, 0x68,
    0x60, 0x20, 0x35, 0x9C, 0x48, 0x14, 0xA6, 0x07, 0x86, 0x7C, 0x04, 0xAA,
    0x08, 0x4A, 0xF0, 0x02, 0xA2, 0x45, 0xBD, 0xD5, 0x01, 0x12, 0x89, 0x7D,
    0xD8, 0x16, 0xAA, 0x01, 0x9C, 0x10, 0xA5, 0x40, 0x06, 0xA5, 0x13, 0x05,
    0xE5, 0x07, 0x61, 0x01, 0x68, 0xAA, 0xB0, 0xA4, 0x40, 0x20, 0x08, 0x3C,
    0x0B, 0x13, 0x26, 0x98, 0x84, 0x03, 0xBC, 0x04, 0x02, 0xF0, 0x0D, 0x81,
    0x1D, 0xA2, 0x26, 0x07, 0x88, 0xC7, 0x45, 0x18, 0x7D, 0x7C, 0xCC, 0xC4,
    0xA5, 0x07, 0xD4, 0xB0, 0xDA, 0x6A, 0xC5, 0x4C, 0xA2, 0x04, 0x0D, 0x04,
    0x95, 0x37, 0x3F, 0xAC, 0xF8, 0x19, 0x30, 0x38, 0x4A, 0x48, 0x2E, 0xB0,
    0x0B, 0x3B, 0x10, 0xC8, 0x84, 0x02, 0xCC, 0x05, 0x88, 0x4C, 0x77, 0x01,
    0xE6, 0xA0, 0x55, 0xE8, 0xA9, 0xAA, 0xE8, 0x02, 0xA9, 0xFB, 0xD1, 0xD7,
    0x46, 0x6E, 0x2A, 0x0A, 0x60, 0xF9, 0x69, 0x59, 0x14, 0x49, 0x98, 0x9D,
    0x60, 0x97, 0x07, 0x13, 0x7D, 0x7B, 0x30, 0x03, 0xA8, 0xA5, 0x3A, 0xAF,
    0x83, 0xD8, 0x71, 0xA9, 0x10, 0x81, 0x9F, 0x3E, 0xCB, 0xC2, 0xA8, 0xC8,
    0xA9, 0x00, 0xE1, 0xDB, 0x2C, 0x8D, 0x96, 0x2E, 0xFA, 0x38, 0x12, 0x08,
    0xF0, 0xD3, 0x49, 0x0C, 0xCF, 0x24, 0x14, 0x81, 0xCB, 0xE4, 0x06, 0x90,
    0xCD, 0x76, 0xD9, 0x4C, 0x5B, 0x6E, 0xE0, 0x58, 0x03, 0xF0, 0xFB, 0x68,
    0x5D, 0x8D, 0xC2, 0xA2, 0x4D, 0x0A, 0xC8, 0xBB, 0x0E, 0xFA, 0x4C, 0x7E,
    0x86, 0x09, 0xF9, 0x30, 0x39, 0xC0, 0xB6, 0x8D, 0xD3, 0x6E, 0x38, 0x01,
    0xB2, 0x86, 0x37, 0xEB, 0x93, 0x85, 0x38, 0x95, 0x7A, 0xE5, 0xBE, 0x58,
    0xFD, 0xAD, 0xEB, 0x76, 0x4F, 0x5C, 0x21, 0xBD, 0xB9, 0xF8, 0x65, 0xCE,
    0x7B, 0xB1, 0xE4, 0x19, 0x70, 0x0A, 0x0C, 0xDE, 0xB3, 0xF8, 0x81, 0x4C,
    0xED, 0xDA, 0x6B, 0xB8, 0x36, 0x93, 0xE4, 0x67, 0xCD, 0x7C, 0x1F, 0x39,
    0x27, 0xDB, 0x6F, 0xB0, 0x91, 0xD4, 0x7A, 0x91, 0xFA, 0x92, 0x4E, 0x2F,
    0x2F, 0x6D, 0x8C, 0x30, 0x31, 0xE7, 0x32, 0xF6, 0xDE, 0xBD, 0x88, 0xF1,
    0x0A, 0x39, 0x4B, 0xDB, 0xE5, 0x5B, 0x4C, 0xBE, 0x55, 0x03, 0xCA, 0xDF,
    0x24, 0x4B, 0xCB, 0xCA, 0x63, 0x0E, 0x7A, 0x36, 0x9D, 0xCA, 0xA3, 0x4D,
    0xCF, 0x34, 0xD2, 0xF0, 0x93, 0x4E, 0x71, 0x1D, 0xA5, 0xD1, 0xEF, 0x47,
    0xBE, 0x69, 0x55, 0xD0, 0xDB, 0x7A, 0x8A, 0xD2, 0x68, 0xF4, 0x59, 0x72,
    0x5E, 0xDC, 0xE4, 0x7E, 0xC4, 0xC3, 0x73, 0x4C, 0x39, 0x18, 0xAC, 0xB4,
    0xAF, 0xC5, 0x52, 0x3C, 0x82, 0x4E, 0x3E, 0xF9, 0x4C, 0x9E, 0xDD, 0xC1,
    0x83, 0xBF, 0x8E, 0x9A, 0xB4, 0x79, 0x6A, 0x1E, 0xE8, 0x32, 0xC0, 0xCB,
    0xBC, 0xB8, 0xFD, 0x24, 0xEF, 0x89, 0xCA, 0xB8, 0xB0, 0xBD, 0x93, 0xD2,
    0x37, 0x41, 0x27, 0x6D, 0x1C, 0xE7, 0x19, 0x09, 0x7B, 0xF2, 0xF2, 0xF4,
    0xE3, 0xC4, 0x23, 0x73, 0x51, 0xB7, 0xBF, 0x39, 0x52, 0xFD, 0x9C, 0xF6,
    0x17, 0x49, 0x2C, 0xCE, 0xBE, 0x7B, 0x52, 0xAD, 0xD2, 0x8C, 0xC1, 0xED,
    0x26, 0x35, 0xD8, 0x31, 0xDB, 0xE1, 0x29, 0x8E, 0x7A, 0x1E, 0x62, 0xDA,
    0xFB, 0xA3, 0xDF, 0x4C, 0x70, 0x5E, 0x33, 0x2E, 0x74, 0xE6, 0x6D, 0xC8,
    0xBE, 0xA6, 0x91, 0xA4, 0x39, 0x3F, 0x9B, 0x72, 0x38, 0x69, 0xCB, 0xF0,
    0xF0, 0x8F, 0xDC, 0xA7, 0x35, 0x7A, 0x39, 0x28, 0xCD, 0xDB, 0xCB, 0x88,
    0x2F, 0xD9, 0xA2, 0x3C, 0x84, 0x38, 0xFB, 0xED, 0xDC, 0x52, 0xBE, 0xD0,
    0xEF, 0x8B, 0xAA, 0x80, 0xD2, 0xAE, 0x2E, 0x86, 0xDD, 0x4C, 0x36, 0xDF,
    0xBD, 0xF8, 0xFD, 0x65, 0xBE, 0x2F, 0x34, 0xED, 0x90, 0xF2, 0x43, 0xF4,
    0x19, 0xA7, 0x82, 0xF8, 0xE3, 0xDA, 0x72, 0x42, 0xB9, 0x03, 0x8E, 0x48,
    0x2D, 0x4D, 0x74, 0x4F, 0xFA, 0x63, 0x5D, 0xC7, 0xA4, 0x5A, 0xD2, 0x8B,
    0xD5, 0xC2, 0x51, 0x70, 0x74, 0xF1, 0x5F, 0xD4, 0x4C, 0x7B, 0xE8, 0xBA,
    0x58, 0x5B, 0x74, 0xDA, 0x8E, 0x72, 0x36, 0xE9, 0xB3, 0x3D, 0xBE, 0x85,
    0x3F, 0xB3, 0xBF, 0x69, 0x77, 0xFB, 0x1F, 0x9E, 0xCC, 0xAA, 0xD0, 0xF7,
    0xE3, 0xD6, 0x72, 0x4D, 0x61, 0x37, 0xC9, 0x10, 0x34, 0x7D, 0x81, 0x25,
    0xD2, 0x66, 0x31, 0xD6, 0x7A, 0xD1, 0xFA, 0x82, 0x6E, 0x27, 0x30, 0x6E,
    0xB1, 0x03, 0x79, 0x0B, 0x44, 0xA0, 0xCC, 0x1A, 0xF5, 0xF6, 0xA3, 0xE1,
    0x8D, 0xA6, 0x13, 0x38, 0x8D, 0x2E, 0xCE, 0x2E, 0x3E, 0x83, 0x0E, 0xCA,
    0x01, 0x47, 0x13, 0x5B, 0xBE, 0x9C, 0xAD, 0xB6, 0x8A, 0xDC, 0xB2, 0x65,
    0x6D, 0xDB, 0x56, 0xDE, 0xF0, 0x95, 0x6E, 0x7D, 0x1E, 0xB5, 0xDD, 0xFA,
    0xC7, 0xC5, 0x3A, 0xD6, 0x6F, 0xB7, 0x7B, 0xC9, 0x1D, 0x42, 0x36, 0x63,
    0xD7, 0xF3, 0xE7, 0x1F, 0xBA, 0xD2, 0x7A, 0xD5, 0x2E, 0x2B, 0x7B, 0x33,
    0x7B, 0xE8, 0x76, 0xEF, 0xF6, 0xA3, 0xFC, 0x79, 0x86, 0x80, 0x98, 0x74,
    0x31, 0x99, 0xA7, 0x5F, 0xE2, 0x14, 0x7E, 0xB8, 0xEB, 0x91, 0xDE, 0x5A,
    0x3B, 0xE8, 0x33, 0x66, 0xEC, 0xBE, 0x68, 0xF8, 0x57, 0x6A, 0x2E, 0x68,
    0xDE, 0x99, 0xDE, 0x96, 0x53, 0xC4, 0xB4, 0x95, 0xE7, 0x1F, 0x00, 0x2E,
    0xB3, 0x79, 0x83, 0x39, 0xA6, 0xCD, 0x52, 0xEA, 0xFA, 0xA3, 0xF6, 0xC9,
    0x1B, 0xDE, 0x66, 0x22, 0xE7, 0xB3, 0x42, 0xD3, 0xBE, 0x28, 0xF7, 0xFB,
    0x57, 0x3E, 0x2E, 0x8F, 0x7B, 0xCD, 0x9D, 0x28, 0x26, 0x66, 0x37, 0xD1,
    0x33, 0xF5, 0x15, 0x7B, 0xFE, 0xE5, 0x1F, 0x0F, 0xFD, 0x97, 0xDC, 0x0D,
    0xF4, 0xFE, 0xE5, 0x1F, 0xB1, 0xCE, 0xEE, 0x3B, 0x94, 0x7B, 0xFF, 0xB5,
    0x6D, 0xAB, 0xF4, 0xDE, 0xE5, 0x1F, 0xA5, 0x37, 0xDF, 0xF7, 0x28, 0xF8,
    0x63, 0xED, 0x93, 0x32, 0xBE, 0x97, 0xDC, 0xA3, 0xF5, 0xA7, 0xFD, 0xC7,
    0x72, 0x8F, 0x3F, 0xF7, 0x16, 0x75, 0xE0, 0x04, 0x6C, 0xE8, 0xAD, 0x0A,
    0x68, 0x82, 0x00, 0x0E, 0xD0, 0x66, 0x46, 0x90, 0xAE, 0xA4, 0x44, 0x22,
    0x24, 0x40, 0x40, 0x71, 0x32, 0xF5, 0x57, 0x15, 0x39, 0x75, 0x8B, 0xCD,
    0x03, 0xF4, 0xBE, 0x36, 0x7B, 0xFF, 0x82, 0xCB, 0xE8, 0x08, 0x89, 0xAB,
    0xBD, 0x88, 0x1B, 0xB0, 0x33, 0xA2, 0xC7, 0xBF, 0x71, 0x87, 0xEE, 0x73,
    0xCA, 0xCB, 0x8B, 0x2E, 0x1C, 0x19, 0x86, 0xD8, 0x7D, 0x68, 0x62, 0xDA,
    0x1D, 0xA0, 0x7F, 0xCA, 0xC4, 0x6F, 0x8C, 0x63, 0x1A, 0x45, 0x8F, 0x12,
    0x84, 0xC3, 0x36, 0x81, 0xFA, 0x1C, 0xF1, 0x73, 0x49, 0xA4, 0x75, 0x26,
    0x20, 0xBE, 0x2B, 0x6B, 0xCC, 0xA1, 0xC9, 0x86, 0x07, 0xF4, 0x33, 0x7C,
    0xEE, 0x89, 0xA8, 0xBD, 0x85, 0x13, 0x65, 0x2A, 0xCE, 0xED, 0xF8, 0x68,
    0xBE, 0x57, 0x3A, 0x7C, 0xB8, 0xAD, 0x61, 0x8D, 0x83, 0x9D, 0x86, 0x8E,
    0x84, 0xD0, 0xD1, 0xD6, 0x07, 0xFB, 0x13, 0x48, 0x6C, 0x9B, 0x11, 0x26,
    0x72, 0xD0, 0xBA, 0xC3, 0x03, 0xF1, 0xF9, 0xD1, 0x66, 0x8F, 0x49, 0x72,
    0x07, 0xA6, 0x17, 0x7C, 0xE1, 0x21, 0xC0, 0x62, 0x07, 0xED, 0x90, 0xBE,
    0x6E, 0x46, 0xAE, 0xBD, 0x8C, 0x4F, 0xBF, 0x7D, 0xA4, 0x57, 0xED, 0xCD,
    0x9F, 0x2A, 0x2C, 0x08, 0x9C, 0x8A, 0xCF, 0xF7, 0xD7, 0x19, 0xFB, 0x9F,
    0xEB, 0x7D, 0x64, 0x73, 0xFB, 0xEB, 0x19, 0xFD, 0xCF, 0xA9, 0xCD, 0x8B,
    0x35, 0x06, 0x79, 0x7F, 0xBE, 0x19, 0xBF, 0xDC, 0xFD, 0xD5, 0x61, 0x7B,
    0xEC, 0x89, 0x9F, 0x7D, 0x19, 0x7F, 0xB9, 0xF7, 0x39, 0xA2, 0x66, 0xF7,
    0x1F, 0x19, 0x87, 0xFE, 0xFA, 0x19, 0xFF, 0x73, 0xFC, 0x4D, 0x59, 0x70,
    0x3E, 0xFA, 0x19, 0xFF, 0x73, 0xE5, 0xF3, 0x3F, 0xCD, 0x2A, 0x76, 0xCF,
    0xF7, 0xD7, 0x19, 0x7B, 0x9F, 0x81, 0xBC, 0x1E, 0x88, 0x3C, 0xB5, 0xD5,
    0xD9, 0x3D, 0xF3, 0xCB, 0x66, 0xDB, 0x5F, 0xE1, 0xCC, 0x33, 0x37, 0x89,
    0x5C, 0xB5, 0xD6, 0x9A, 0x3B, 0xB3, 0xE2, 0xE8, 0x87, 0xE4, 0x0F, 0xFB,
    0xE0, 0x01, 0x2D, 0x75, 0xD6, 0x24, 0x6C, 0xFE, 0xDF, 0x77, 0x5F, 0x9D,
    0xCC, 0x1F, 0x35, 0x39, 0x6B, 0xB0, 0x34, 0x2A, 0xE8, 0x04, 0xA1, 0xD7,
    0xCE, 0x07, 0xF7, 0x5B, 0x9D, 0x5D, 0x8D, 0x34, 0x9F, 0x40, 0x55, 0xE1,
    0x0E, 0xF0, 0x3F, 0x87, 0x2E, 0x9D, 0x3A, 0xEC, 0xCD, 0x32, 0x5A, 0x01,
    0x99, 0x5B, 0x2E, 0x9F, 0xBB, 0x92, 0x70, 0x39, 0x1B, 0x9B, 0x40, 0x0D,
    0xC8, 0x0E, 0x70, 0x3F, 0x47, 0x97, 0x26, 0xDF, 0xD7, 0xFA, 0xCC, 0x9F,
    0xAA, 0x2F, 0x31, 0xF8, 0x21, 0xC9, 0x66, 0x5F, 0xF8, 0x72, 0xB7, 0xEB,
    0x73, 0x2F, 0xFE, 0xD7, 0xDD, 0xFC, 0xCB, 0xFE, 0x87, 0x2B, 0x2E, 0x9F,
    0x32, 0xFF, 0xC1, 0x57, 0x37, 0x99, 0x7F, 0xCE, 0xE5, 0x29, 0xD6, 0xE6,
    0x5F, 0xFB, 0xB5, 0xDF, 0xCC, 0xBF, 0xE6, 0x72, 0x8F, 0xE7, 0xB3, 0x2F,
    0xFC, 0x0D, 0xE0, 0xF4, 0x15, 0xED, 0xB4, 0xD7, 0x88, 0xF5, 0x38, 0x7F,
    0x8C, 0x01, 0xE4, 0x3D, 0xE2, 0x11, 0xDE, 0x9A, 0x4A, 0xDF, 0x69, 0xE0,
    0x55, 0x56, 0xC4, 0xE1, 0x31, 0x02, 0xDE, 0x91, 0xE0, 0x45, 0xE4, 0x39,
    0x20, 0xE0, 0xE3, 0x92, 0x0D, 0xDF, 0x0D, 0x60, 0x6A, 0xAA, 0xD8, 0xE4,
    0xC3, 0xAA, 0xD8, 0xE4, 0xA5, 0xAA, 0xE6, 0x8A, 0x39, 0x09, 0xE5, 0x2F,
    0x28, 0xE5, 0x46, 0x68, 0xE8, 0x47, 0x64, 0xE6, 0x3C, 0xE0, 0xF2, 0x9C,
    0xE7, 0x87, 0x9C, 0x0C, 0x56, 0x26, 0xE8, 0xE2, 0x47, 0xA9, 0x9C, 0xE1,
    0x22, 0xE6, 0xE3, 0x72, 0xE7, 0x67, 0x21, 0xE0, 0x31, 0xC4, 0xE1, 0xE1,
    0xC6, 0xDE, 0x13, 0x94, 0xDF, 0x38, 0xE3, 0x86, 0x63, 0xE7, 0xD8, 0x9B,
    0xC2, 0x18, 0x00, 0xE2, 0xA5, 0xE1, 0xE5, 0xE3, 0x85, 0xE3, 0xAD, 0xC9,
    0xE3, 0x5C, 0xE4, 0x99, 0xCA, 0xE3, 0x1C, 0xE3, 0x8D, 0xD0, 0x73, 0xB9,
    0xDD, 0x5B, 0x90, 0xDF, 0xF3, 0x20, 0xDE, 0x84, 0xE4, 0xB1, 0x37, 0x18,
    0xDE, 0xE6, 0xDF, 0x96, 0x26, 0xEB, 0xE2, 0x1C, 0xE7, 0xC2, 0x72, 0xE7,
    0x11, 0xB2, 0x07, 0x01, 0xCB, 0xE2, 0xFF, 0x36, 0x2E, 0x2F, 0x0B, 0x34,
    0x85, 0x88, 0xAF, 0x30, 0x8A, 0xEF, 0x01, 0x5A, 0xD5, 0x1C, 0x60, 0x7F,
    0xC2, 0xAD, 0x6E, 0x22, 0xB6, 0x19, 0x2C, 0x57, 0xB1, 0x1E, 0xBE, 0x86,
    0x58, 0x1C, 0x63, 0xD3, 0x0A, 0x1F, 0x1C, 0x90, 0xD3, 0x16, 0x9E, 0xAA,
    0xEA, 0xE4, 0x52, 0x9E, 0xF1, 0x1F, 0x96, 0x74, 0x76, 0x5B, 0x2F, 0x8A,
    0xB2, 0x72, 0x88, 0xC4, 0x5C, 0x81, 0xFC, 0x0A, 0x5F, 0x39, 0x22, 0xA5,
    0xBD, 0x84, 0x43, 0x99, 0x29, 0x53, 0x93, 0x25, 0x96, 0x05, 0xA6, 0x1A,
    0x4B, 0x72, 0x39, 0xC9, 0x54, 0xD6, 0x20, 0xD3, 0x2E, 0x47, 0x0A, 0x68,
    0xD1, 0xEC, 0xA0, 0xCA, 0xE2, 0x90, 0xBB, 0x7B, 0xD3, 0xA0, 0x41, 0x71,
    0x6A, 0x15, 0xEF, 0x7A, 0x71, 0x88, 0x33, 0x55, 0x62, 0xAB, 0x85, 0xE6,
    0x82, 0x2D, 0x95, 0xDE, 0x01, 0xC8, 0xCC, 0x64, 0x81, 0xFE, 0x83, 0x92,
    0x6B, 0x1D, 0x07, 0x91, 0x36, 0xE8, 0xB5, 0x5C, 0x81, 0xC6, 0x29, 0x7C,
    0x8E, 0x55, 0x55, 0x26, 0x44, 0xE4, 0x3D, 0xFB, 0xAC, 0x75, 0x48, 0x71,
    0x3A, 0xB3, 0x16, 0xA6, 0xB9, 0xBB, 0x0A, 0xFB, 0x81, 0xFA, 0xE3, 0xDE,
    0x0E, 0x52, 0xEB, 0x8B, 0x3E, 0x99, 0x85, 0x43, 0xED, 0x16, 0x88, 0xE9,
    0xE4, 0xFE, 0xB7, 0xA5, 0xA4, 0xDA, 0x51, 0x72, 0x2E, 0x35, 0x52, 0x6A,
    0x82, 0xD5, 0xBD, 0x49, 0xC0, 0xD1, 0x84, 0x71, 0xC1, 0x4D, 0xEE, 0xB8,
    0x67, 0x40, 0xDD, 0x7A, 0x6B, 0x7A, 0xEE, 0x19, 0xC6, 0x37, 0xBB, 0xE3,
    0xEE, 0x62, 0xE0, 0xDD, 0x48, 0x89, 0xC6, 0x37, 0x3C, 0x56, 0xD6, 0x3C,
    0x21, 0xE0, 0xE9, 0x03, 0xFE, 0x87, 0x85, 0x72, 0x9D, 0xCD, 0xFB, 0xD9,
    0x57, 0x73, 0x72, 0xF5, 0xD9, 0x72, 0x4A, 0xAF, 0x52, 0xAA, 0x59, 0xEF,
    0x33, 0x30, 0x72, 0x19, 0x67, 0x26, 0xC5, 0x85, 0x12, 0x28, 0xCF, 0x67,
    0x81, 0xFD, 0xD1, 0xC1, 0xEF, 0x57, 0xAB, 0x88, 0xB4, 0x65, 0xC8, 0x9F,
    0x59, 0x3E, 0x88, 0x5F, 0x13, 0x68, 0xC7, 0x99, 0x54, 0xEA, 0xFD, 0xEA,
    0xBD, 0x65, 0xEE, 0xC7, 0x29, 0x7D, 0xD7, 0x13, 0xE8, 0x17, 0xAD, 0x74,
    0x5F, 0x5D, 0xC4, 0xF8, 0xC5, 0xED, 0x58, 0x18, 0xB0, 0x61, 0xAB, 0x86,
    0x17, 0xE8, 0x84, 0xDE, 0xB7, 0x3E, 0xE2, 0x3F, 0x82, 0xD5, 0x6F, 0x9D,
    0xD0, 0x0B, 0xD3, 0xAB, 0xB9, 0xFB, 0xC0, 0xDA, 0x3C, 0x44, 0x5B, 0xDE,
    0x44, 0x12, 0x75, 0x10, 0x69, 0x1D, 0x4E, 0xD2, 0xC6, 0x17, 0xA0, 0x7E,
    0xF1, 0x6C, 0x1E, 0x80, 0x3C, 0xB5, 0xCB, 0xD9, 0x3C, 0xD3, 0xA3, 0x26,
    0xAD, 0x23, 0xAD, 0xAA, 0x9D, 0x07, 0x75, 0x1B, 0x45, 0x2E, 0xEF, 0x57,
    0xEB, 0xC6, 0x6A, 0x7D, 0x69, 0xBE, 0x3E, 0xA2, 0xB6, 0x7D, 0x5E, 0xB2,
    0xFB, 0x7E, 0xF3, 0x9F, 0x44, 0xFA, 0x7D, 0xB5, 0xF6, 0xBD, 0xE7, 0x3E,
    0xBE, 0x9C, 0x3A, 0xB1, 0x6A, 0xE6, 0x4D, 0x3A, 0x49, 0xDD, 0x43, 0xE3,
    0xDE, 0x07, 0xFD, 0x6F, 0x72, 0xD7, 0x35, 0x66, 0x23, 0x4F, 0x4D, 0xF7,
    0x34, 0xDF, 0xAA, 0xCB, 0xEF, 0x83, 0xA5, 0xAE, 0x70, 0x29, 0xD2, 0x9F,
    0x54, 0xD2, 0x36, 0x81, 0xFD, 0xD4, 0x68, 0xFD, 0x47, 0x9C, 0x8A, 0x00,
    0x32, 0x6A, 0xD2, 0x7A, 0xAA, 0xAC, 0x76, 0x6F, 0x3D, 0x6C, 0x35, 0x6F,
    0xC4, 0xB5, 0xF2, 0x96, 0x82, 0x02, 0xFA, 0x3B, 0xDB, 0x7F, 0x51, 0xE7,
    0x11, 0x92, 0x7D, 0x47, 0xCF, 0xEF, 0x65, 0xFF, 0x51, 0xE6, 0xF5, 0x55,
    0x7D, 0x47, 0xCE, 0x6E, 0xAB, 0xD7, 0xB7, 0x89, 0xE3, 0x7D, 0x47, 0x9C,
    0x7B, 0xAB, 0xFE, 0x06, 0x79, 0xAC, 0xB7, 0xFA, 0x8D, 0x5A, 0x6C, 0x27,
    0x6F, 0xAB, 0x96, 0xFF, 0xF4, 0xBC, 0x6F, 0xE5, 0xBF, 0xD0, 0x6A, 0xDD,
    0x2C, 0x33, 0xF0, 0x32, 0xDF, 0xFC, 0x11, 0xE6, 0xB2, 0xDF, 0xE8, 0x75,
    0x70, 0x51, 0xB5, 0xFA, 0x39, 0x6F, 0xFE, 0xEB, 0x77, 0xF2, 0xDF, 0xDF,
    0xD5, 0xD4, 0xF9, 0xD4, 0x85, 0x86, 0x80, 0x05, 0x8F, 0xAC, 0x38, 0x10,
    0x98, 0x00, 0x00, 0x43, 0xAA, 0x91, 0x12, 0x43, 0xAA, 0x19, 0x10, 0x98,
    0x92, 0x4C, 0xC3, 0x2D, 0xDC, 0x54, 0x65, 0xCB, 0x3E, 0x1E, 0xE6, 0xE9,
    0x8B, 0x00, 0x3F, 0x5F, 0x44, 0xA3, 0x2D, 0x3A, 0x80, 0x9F, 0xFB, 0x9E,
    0xAD, 0x38, 0xDD, 0xEC, 0xF6, 0x0D, 0x82, 0x15, 0x59, 0x2E, 0xE5, 0x7E,
    0x6A, 0x27, 0xB2, 0x12, 0x41, 0xCA, 0xD3, 0xCA, 0xF1, 0x24, 0x67, 0x44,
    0x93, 0x12, 0x99, 0xAF, 0x84, 0x80, 0xB3, 0x83, 0x27, 0xB3, 0x60, 0xD8,
    0x1E, 0xD5, 0x23, 0x4C, 0x6D, 0xDD, 0x7E, 0xCD, 0x66, 0x7A, 0x11, 0x54,
    0xB9, 0x17, 0x97, 0xB9, 0x6C, 0x2B, 0x47, 0x63, 0xE6, 0x7D, 0x88, 0x7A,
    0x22, 0x9B, 0xE5, 0xA5, 0x43, 0xAB, 0xAB, 0xEC, 0x07, 0xEA, 0xE2, 0x4A,
    0x7B, 0xAD, 0x43, 0xAE, 0x41, 0xE8, 0xC1, 0x31, 0x77, 0xC1, 0xC3, 0xD1,
    0x64, 0x0F, 0x51, 0x09, 0x7A, 0x68, 0xAA, 0x2F, 0x2E, 0xAA, 0xAF, 0xB0,
    0x1A, 0xAA, 0x3A, 0x44, 0x6A, 0x1D, 0x2B, 0x0F, 0xBC, 0xA4, 0xB0, 0x17,
    0x07, 0xB0, 0x63, 0x20, 0xA3, 0x53, 0xF5, 0x84, 0x1E, 0x7B, 0xD2, 0x80,
    0x5D, 0x9F, 0x57, 0xEA, 0xD0, 0x89, 0x57, 0x82, 0xE7, 0x5A, 0x19, 0xE4,
    0xF2, 0xD5, 0x6B, 0x47, 0x9D, 0x19, 0x6F, 0x93, 0xAC, 0x6A, 0xD5, 0x53,
    0x4A, 0x71, 0xFC, 0xEB, 0x19, 0x7C, 0x9D, 0x91, 0x0A, 0x8D, 0x44, 0xD4,
    0x81, 0x79, 0xD7, 0x19, 0x79, 0x3A, 0xF6, 0x9E, 0x55, 0xA0, 0xDE, 0x7F,
    0xAF, 0xCE, 0x19, 0xA3, 0xC9, 0xE5, 0x0A, 0x68, 0x3C, 0xEB, 0x19, 0x7C,
    0x9D, 0x3F, 0x4D, 0xEA, 0x92, 0xAB, 0x6E, 0xF3, 0xAD, 0x19, 0xF2, 0x75,
    0xB2, 0xF4, 0x76, 0x2D, 0xE8, 0x84, 0x88, 0x2A, 0x35, 0xEF, 0xB6, 0x95,
    0xD7, 0x1F, 0x6A, 0xD0, 0x4A, 0xB8, 0x39, 0xA6, 0x82, 0x5F, 0x4C, 0x56,
    0x7F, 0x28, 0xD8, 0x3F, 0x1F, 0xD8, 0xE5, 0xC4, 0x58, 0xF0, 0x55, 0x1C,
    0x58, 0x16, 0x94, 0xBE, 0x6F, 0x5B, 0xCF, 0xF5, 0x4F, 0x4C, 0x71, 0xA4,
    0x9F, 0x52, 0x11, 0x41, 0xC7, 0xBB, 0xC7, 0xBB, 0x22, 0xD1, 0xB3, 0x12,
    0xC5, 0x8F, 0x0B, 0x57, 0x2C, 0x87, 0x62, 0x7B, 0xD0, 0xFB, 0x76, 0x61,
    0xAD, 0x82, 0xCA, 0x7F, 0xAF, 0xBD, 0x06, 0x6A, 0xB9, 0x37, 0x1F, 0x9E,
    0x57, 0x16, 0x3C, 0x45, 0x13, 0x56, 0x0B, 0x41, 0xB8, 0xBB, 0xB8, 0xB0,
    0xE5, 0xCB, 0xFD, 0xB9, 0x55, 0x88, 0x0A, 0x94, 0xBF, 0x87, 0x5E, 0x35,
    0x88, 0xEA, 0xAF, 0xD9, 0xF1, 0xEF, 0xC5, 0x55, 0x57, 0xF2, 0xD7, 0x07,
    0xD5, 0x5F, 0xAC, 0x63, 0xD5, 0x8A, 0xEA, 0xAF, 0xD9, 0x10, 0xB1, 0x1D,
    0x55, 0xFA, 0xF6, 0x39, 0x98, 0x86, 0xAA, 0xFE, 0x51, 0x83, 0xEA, 0xAF,
    0xD3, 0xF1, 0xC7, 0xC5, 0x75, 0x57, 0xEA, 0x45, 0xC0
  };

  void Decompressor_M2::getSFXModule(std::vector< unsigned char >& outBuf,
                                     int runAddr, bool c16Mode, bool noCRCCheck,
                                     bool noReadBuffer, int borderEffectType,
                                     bool noBlankDisplay, bool noZPSaveRestore,
                                     bool noROM, bool noCLI)
  {
    bool    isBasicProgram = (runAddr == -1);
    if (runAddr < -3)
      runAddr = -2;
    else if (runAddr > 0xFFFF)
      runAddr = runAddr & 0xFFFF;
    outBuf.clear();
    int     decompressModuleIndex =
        (c16Mode ? 1 : 0) | (noCRCCheck ? 2 : 0) | (noReadBuffer ? 4 : 0)
        | ((borderEffectType & 3) << 3) | (noBlankDisplay ? 32 : 0)
        | (noZPSaveRestore ? 64 : 0);
    std::vector< unsigned char >  tmpBuf1;
    std::vector< std::vector< unsigned char > > tmpBuf2;
    for (size_t i = 0; i < sizeof(sfxModuleLibrary); i++)
      tmpBuf1.push_back(sfxModuleLibrary[i]);
    Decompressor_M2 decompressor;
    decompressor.decompressData(tmpBuf2, tmpBuf1);
    const unsigned char *p =
        &(tmpBuf2[0].front()) + (decompressModuleIndex * 4 + 2);
    unsigned int  offs = (unsigned int) p[0] | ((unsigned int) p[1] << 8);
    unsigned int  len = (unsigned int) p[2] | ((unsigned int) p[3] << 8);
    p = &(tmpBuf2[0].front()) + (offs + 2U);
    for (unsigned int i = 0U; (i + 3) < len; i++)
      outBuf.push_back(p[i]);
    if (!noROM) {
      outBuf.push_back((unsigned char) 0x8C);   // STY $FF3E
      outBuf.push_back((unsigned char) 0x3E);
      outBuf.push_back((unsigned char) 0xFF);
    }
    if (!noCLI) {
      outBuf.push_back((unsigned char) 0x58);   // CLI
    }
    if (isBasicProgram) {
      outBuf.push_back((unsigned char) 0x20);   // JSR $8BBE
      outBuf.push_back((unsigned char) 0xBE);
      outBuf.push_back((unsigned char) 0x8B);
      runAddr = 0x8BDC;
    }
    if (runAddr == -3)
      runAddr = 0xFF52;
    else if (runAddr < 0)
      runAddr = 0x867E;
    outBuf.push_back((unsigned char) 0x4C);     // JMP $nnnn
    outBuf.push_back((unsigned char) (runAddr & 0xFF));
    outBuf.push_back((unsigned char) ((runAddr >> 8) & 0xFF));
    // hack to fix decompressor code end address and size in the code
    unsigned int  endAddr =
        ((unsigned int) outBuf[0] | ((unsigned int) outBuf[1] << 8))
        + (unsigned int) (outBuf.size() - 2);
    for (size_t i = 0; (i + 14) <= outBuf.size(); i++) {
      if (outBuf[i] == 0xA2 &&                  // LDX #$nn
          outBuf[i + 2] == 0xBD &&              // LDA $nnnn, X
          outBuf[i + 5] == 0x9D &&              // STA $nnnn, X
          outBuf[i + 8] == 0xBD &&              // LDA $nnnn, X
          outBuf[i + 11] == 0x9D) {             // STA $nnnn, X
        // calculate the size of decompressor code to be copied to the stack
        // and tape buffer
        unsigned int  addr0 =
            (unsigned int) outBuf[i + 3] | ((unsigned int) outBuf[i + 4] << 8);
        unsigned int  addr1 =
            (unsigned int) outBuf[i + 9] | ((unsigned int) outBuf[i + 10] << 8);
        unsigned int  addr2 = endAddr - 1U;
        // store whichever size is larger
        if ((addr1 - addr0) >= (addr2 - addr1))
          outBuf[i + 1] = (unsigned char) (addr1 - addr0);
        else
          outBuf[i + 1] = (unsigned char) (addr2 - addr1);
        for ( ; (i + 7) <= outBuf.size(); i++) {
          if (outBuf[i] == 0xA5 &&              // LDA $nn
              outBuf[i + 2] == 0xE9 &&          // SBC #$nn
              outBuf[i + 4] == 0xA8 &&          // TAY
              outBuf[i + 5] == 0xA9) {          // LDA #$nn
            // store LSB of decompressor end address
            outBuf[i + 3] = (unsigned char) (endAddr & 0xFFU);
            outBuf[i + 6] = (unsigned char) (endAddr & 0xFFU);
            for ( ; (i + 4) <= outBuf.size(); i++) {
              if (outBuf[i] == 0xA5 &&          // LDA $nn
                  outBuf[i + 2] == 0xC9) {      // CMP #$nn
                // store MSB of decompressor end address
                outBuf[i + 3] = (unsigned char) (((endAddr >> 8) - 1U) & 0xFFU);
                break;
              }
            }
            break;
          }
        }
        break;
      }
    }
  }

}       // namespace Plus4Compress

