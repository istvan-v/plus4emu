
// compressor utility for Commodore Plus/4 programs
// Copyright (C) 2007-2016 Istvan Varga <istvanv@users.sourceforge.net>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Plus/4 program files generated by this utility are not covered by the
// GNU General Public License, and can be used, modified, and distributed
// without any restrictions.

#include "plus4emu.hpp"
#include "compress.hpp"
#include "decompress1.hpp"
#include <vector>

namespace Plus4Compress {

  unsigned int Decompressor_M1::readBits(size_t nBits)
  {
    unsigned int  retval = 0U;
    for (size_t i = 0; i < nBits; i++) {
      if (shiftRegisterCnt < 1) {
        if (inputBufferPosition >= inputBufferSize)
          throw Plus4Emu::Exception("unexpected end of compressed data");
        shiftRegister = inputBuffer[inputBufferPosition];
        shiftRegisterCnt = 8;
        inputBufferPosition++;
      }
      retval = (retval << 1) | (unsigned int) ((shiftRegister >> 7) & 0x01);
      shiftRegister = (shiftRegister & 0x7F) << 1;
      shiftRegisterCnt--;
    }
    return retval;
  }

  unsigned char Decompressor_M1::readLiteralByte()
  {
    if (inputBufferPosition >= inputBufferSize)
      throw Plus4Emu::Exception("unexpected end of compressed data");
    unsigned char retval = inputBuffer[inputBufferPosition];
    inputBufferPosition++;
    return retval;
  }

  unsigned int Decompressor_M1::readMatchLength()
  {
    unsigned int  slotNum = 0U;
    do {
      if (readBits(1) == 0U)
        break;
      slotNum++;
    } while (slotNum < 9U);
    if (slotNum == 0U)                  // literal byte
      return 0U;
    if (slotNum == 9U)                  // literal sequence
      return (readBits(8) + 0x80000011U);
    return (readLZMatchParameter((unsigned char) (slotNum - 1U),
                                 &(lengthDecodeTable[0])) + 1U);
  }

  unsigned int Decompressor_M1::readLZMatchParameter(
      unsigned char slotNum, const unsigned int *decodeTable)
  {
    unsigned int  retval = decodeTable[int(slotNum) * 2 + 1];
    retval += readBits(size_t(decodeTable[int(slotNum) * 2 + 0]));
    return retval;
  }

  unsigned char Decompressor_M1::readDeltaValue()
  {
    return (unsigned char) ((readBits(8) + 1U) & 0xFFU);
  }

  void Decompressor_M1::readDecodeTables()
  {
    unsigned int  tmp = 0U;
    unsigned int  *tablePtr = &(lengthDecodeTable[0]);
    offs3PrefixSize = size_t(readBits(2)) + 2;
    size_t  offs3NumSlots = (size_t(1) << offs3PrefixSize) - 1;
    for (size_t i = 0; i < (8 + 4 + 8 + offs3NumSlots); i++) {
      if (i == 8) {
        tmp = 0U;
        tablePtr = &(offs1DecodeTable[0]);
      }
      else if (i == (8 + 4)) {
        tmp = 0U;
        tablePtr = &(offs2DecodeTable[0]);
      }
      else if (i == (8 + 4 + 8)) {
        tmp = 0U;
        tablePtr = &(offs3DecodeTable[0]);
      }
      tablePtr[0] = readBits(4);
      tablePtr[1] = tmp;
      tmp = tmp + (1U << tablePtr[0]);
      tablePtr = tablePtr + 2;
    }
  }

  bool Decompressor_M1::decompressDataBlock(std::vector< unsigned char >& buf,
                                            std::vector< bool >& bytesUsed)
  {
    unsigned int  startAddr = readBits(16);
    unsigned int  nSymbols = readBits(16) + 1U;
    bool    isLastBlock = readBits(1);
    bool    compressionEnabled = readBits(1);
    if (!compressionEnabled) {
      // copy uncompressed data
      for (unsigned int i = 0U; i < nSymbols; i++) {
        if (startAddr > 0xFFFFU || bytesUsed[startAddr])
          throw Plus4Emu::Exception("error in compressed data");
        buf[startAddr] = readLiteralByte();
        bytesUsed[startAddr] = true;
        startAddr++;
      }
      return isLastBlock;
    }
    readDecodeTables();
    for (unsigned int i = 0U; i < nSymbols; i++) {
      unsigned int  matchLength = readMatchLength();
      if (matchLength == 0U) {
        // literal byte
        if (startAddr > 0xFFFFU || bytesUsed[startAddr])
          throw Plus4Emu::Exception("error in compressed data");
        buf[startAddr] = readLiteralByte();
        bytesUsed[startAddr] = true;
        startAddr++;
      }
      else if (matchLength >= 0x80000000U) {
        // literal sequence
        matchLength &= 0x7FFFFFFFU;
        while (matchLength > 0U) {
          if (startAddr > 0xFFFFU || bytesUsed[startAddr])
            throw Plus4Emu::Exception("error in compressed data");
          buf[startAddr] = readLiteralByte();
          bytesUsed[startAddr] = true;
          startAddr++;
          matchLength--;
        }
      }
      else {
        if (matchLength > 65535U)
          throw Plus4Emu::Exception("error in compressed data");
        // get match offset:
        unsigned int  offs = 0U;
        unsigned char deltaValue = 0x00;
        if (matchLength == 1U) {
          unsigned int  slotNum = readBits(2);
          offs = readLZMatchParameter((unsigned char) slotNum,
                                      &(offs1DecodeTable[0]));
        }
        else if (matchLength == 2U) {
          unsigned int  slotNum = readBits(3);
          offs = readLZMatchParameter((unsigned char) slotNum,
                                      &(offs2DecodeTable[0]));
        }
        else {
          unsigned int  slotNum = readBits(offs3PrefixSize);
          if (slotNum > 0U) {
            offs = readLZMatchParameter((unsigned char) (slotNum - 1U),
                                        &(offs3DecodeTable[0]));
          }
          else {
            // match with delta value
            deltaValue = readDeltaValue();
            offs = readBits(5);
          }
        }
        if (offs >= 0xFFFFU || offs >= startAddr)
          throw Plus4Emu::Exception("error in compressed data");
        offs++;
        unsigned int  lzMatchReadAddr = (startAddr - offs) & 0xFFFFU;
        for (unsigned int j = 0U; j < matchLength; j++) {
          if (!bytesUsed[lzMatchReadAddr])  // byte does not exist yet
            throw Plus4Emu::Exception("error in compressed data");
          if (startAddr > 0xFFFFU || bytesUsed[startAddr])
            throw Plus4Emu::Exception("error in compressed data");
          buf[startAddr] = (buf[lzMatchReadAddr] + deltaValue) & 0xFF;
          bytesUsed[startAddr] = true;
          startAddr++;
          lzMatchReadAddr = (lzMatchReadAddr + 1U) & 0xFFFFU;
        }
      }
    }
    return isLastBlock;
  }

  // --------------------------------------------------------------------------

  Decompressor_M1::Decompressor_M1()
    : Decompressor(),
      offs3PrefixSize(2),
      shiftRegister(0x00),
      shiftRegisterCnt(0),
      inputBuffer((unsigned char *) 0),
      inputBufferSize(0),
      inputBufferPosition(0)
  {
  }

  Decompressor_M1::~Decompressor_M1()
  {
  }

  void Decompressor_M1::decompressData(
      std::vector< std::vector< unsigned char > >& outBuf,
      const std::vector< unsigned char >& inBuf)
  {
    outBuf.clear();
    if (inBuf.size() < 1)
      return;
    bool    startPosTable[1024];
    for (size_t i = 0; i < 1024; i++)
      startPosTable[i] = false;
    unsigned char crcValue = 0x00;
    // find possible start offsets of compressed data
    for (size_t i = inBuf.size(); i > 0; ) {
      i--;
      crcValue = crcValue ^ inBuf[i];
      crcValue = ((crcValue & 0x7F) << 1) | ((crcValue & 0x80) >> 7);
      crcValue = (crcValue + 0xAC) & 0xFF;
      if (crcValue == 0x80) {
        if (i < 64 || (i >= 416 && i < 832))
          startPosTable[i] = true;
      }
    }
    std::vector< unsigned char >  tmpBuf;
    std::vector< bool > bytesUsed;
    tmpBuf.resize(65536);
    bytesUsed.resize(65536);
    bool    doneFlag = false;
    for (size_t i = 0; i < 1024; i++) {
      if (!startPosTable[i])
        continue;
      for (size_t j = 0; j < 65536; j++) {
        tmpBuf[j] = 0x00;
        bytesUsed[j] = false;
      }
      // if found a position where the checksum matches, try to decompress data
      inputBuffer = &(inBuf.front());
      inputBufferSize = inBuf.size();
      inputBufferPosition = i + 1;
      shiftRegister = 0x00;
      shiftRegisterCnt = 0;
      try {
        while (!decompressDataBlock(tmpBuf, bytesUsed))
          ;
        // on successful decompression, all input data must be consumed
        if (!(inputBufferPosition >= inputBufferSize && shiftRegister == 0x00))
          throw Plus4Emu::Exception("error in compressed data");
        doneFlag = true;
      }
      catch (Plus4Emu::Exception) {
      }
      if (doneFlag)
        break;
    }
    if (!doneFlag)
      throw Plus4Emu::Exception("error in compressed data");
    unsigned int  startPos = 0U;
    size_t        nBytes = 0;
    // find all data blocks
    for (size_t i = 0; i <= 65536; i++) {
      if (i >= 65536 || !bytesUsed[i]) {
        if (nBytes > 0) {
          std::vector< unsigned char >  newBuf;
          newBuf.push_back((unsigned char) (startPos & 0xFFU));
          newBuf.push_back((unsigned char) ((startPos >> 8) & 0xFFU));
          for (size_t j = 0U; j < nBytes; j++)
            newBuf.push_back(tmpBuf[startPos + j]);
          outBuf.push_back(newBuf);
        }
        startPos = (unsigned int) (i + 1);
        nBytes = 0;
      }
      else {
        nBytes++;
      }
    }
  }

  // --------------------------------------------------------------------------

#include "sfxcode1.cpp"

  void Decompressor_M1::getSFXModule(std::vector< unsigned char >& outBuf,
                                     int runAddr, bool c16Mode, bool noCRCCheck,
                                     bool noReadBuffer, int borderEffectType,
                                     bool noBlankDisplay, bool noZPSaveRestore,
                                     bool noROM, bool noCLI)
  {
    bool    isBasicProgram = (runAddr == -1);
    if (runAddr < -3)
      runAddr = -2;
    else if (runAddr > 0xFFFF)
      runAddr = runAddr & 0xFFFF;
    outBuf.clear();
    int     decompressModuleIndex =
        (c16Mode ? 1 : 0) | (noCRCCheck ? 2 : 0) | (noReadBuffer ? 4 : 0)
        | ((borderEffectType & 3) << 3) | (noBlankDisplay ? 32 : 0)
        | (noZPSaveRestore ? 64 : 0);
    std::vector< unsigned char >  tmpBuf1;
    std::vector< std::vector< unsigned char > > tmpBuf2;
    for (size_t i = 0; i < sizeof(sfxModuleLibrary); i++)
      tmpBuf1.push_back(sfxModuleLibrary[i]);
    Decompressor_M1 decompressor;
    decompressor.decompressData(tmpBuf2, tmpBuf1);
    const unsigned char *p =
        &(tmpBuf2[0].front()) + (decompressModuleIndex * 4 + 2);
    unsigned int  offs = (unsigned int) p[0] | ((unsigned int) p[1] << 8);
    unsigned int  len = (unsigned int) p[2] | ((unsigned int) p[3] << 8);
    p = &(tmpBuf2[0].front()) + (offs + 2U);
    for (unsigned int i = 0U; (i + 3) < len; i++)
      outBuf.push_back(p[i]);
    if (!noROM) {
      outBuf.push_back((unsigned char) 0x8C);   // STY $FF3E
      outBuf.push_back((unsigned char) 0x3E);
      outBuf.push_back((unsigned char) 0xFF);
    }
    if (!noCLI) {
      outBuf.push_back((unsigned char) 0x58);   // CLI
    }
    if (isBasicProgram) {
      outBuf.push_back((unsigned char) 0x20);   // JSR $8BBE
      outBuf.push_back((unsigned char) 0xBE);
      outBuf.push_back((unsigned char) 0x8B);
      runAddr = 0x8BDC;
    }
    if (runAddr == -3)
      runAddr = 0xFF52;
    else if (runAddr < 0)
      runAddr = 0x867E;
    outBuf.push_back((unsigned char) 0x4C);     // JMP $nnnn
    outBuf.push_back((unsigned char) (runAddr & 0xFF));
    outBuf.push_back((unsigned char) ((runAddr >> 8) & 0xFF));
    // hack to fix decompressor code end address and size in the code
    unsigned int  endAddr =
        ((unsigned int) outBuf[0] | ((unsigned int) outBuf[1] << 8))
        + (unsigned int) (outBuf.size() - 2);
    for (size_t i = 0; (i + 14) <= outBuf.size(); i++) {
      if (outBuf[i] == 0xA2 &&                  // LDX #$nn
          outBuf[i + 2] == 0xBD &&              // LDA $nnnn, X
          outBuf[i + 5] == 0x9D &&              // STA $nnnn, X
          outBuf[i + 8] == 0xBD &&              // LDA $nnnn, X
          outBuf[i + 11] == 0x9D) {             // STA $nnnn, X
        // calculate the size of decompressor code to be copied to the stack
        // and tape buffer
        unsigned int  addr0 =
            (unsigned int) outBuf[i + 3] | ((unsigned int) outBuf[i + 4] << 8);
        unsigned int  addr1 =
            (unsigned int) outBuf[i + 9] | ((unsigned int) outBuf[i + 10] << 8);
        unsigned int  addr2 = endAddr - 1U;
        // store whichever size is larger
        if ((addr1 - addr0) >= (addr2 - addr1))
          outBuf[i + 1] = (unsigned char) (addr1 - addr0);
        else
          outBuf[i + 1] = (unsigned char) (addr2 - addr1);
        for ( ; (i + 7) <= outBuf.size(); i++) {
          if (outBuf[i] == 0xA5 &&              // LDA $nn
              outBuf[i + 2] == 0xE9 &&          // SBC #$nn
              outBuf[i + 4] == 0xA8 &&          // TAY
              outBuf[i + 5] == 0xA9) {          // LDA #$nn
            // store LSB of decompressor end address
            outBuf[i + 3] = (unsigned char) (endAddr & 0xFFU);
            outBuf[i + 6] = (unsigned char) (endAddr & 0xFFU);
            for ( ; (i + 4) <= outBuf.size(); i++) {
              if (outBuf[i] == 0xA5 &&          // LDA $nn
                  outBuf[i + 2] == 0xC9) {      // CMP #$nn
                // store MSB of decompressor end address
                outBuf[i + 3] = (unsigned char) (((endAddr >> 8) - 1U) & 0xFFU);
                break;
              }
            }
            break;
          }
        }
        break;
      }
    }
  }

}       // namespace Plus4Compress

