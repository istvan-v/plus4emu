
// p4fliconv: high resolution interlaced FLI converter utility
// Copyright (C) 2007-2008 Istvan Varga <istvanv@users.sourceforge.net>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Plus/4 program files generated by this utility are not covered by the
// GNU General Public License, and can be used, modified, and distributed
// without any restrictions.

#include "p4fliconv.hpp"
#include "prgdata.hpp"

namespace Plus4FLIConv {

  const unsigned char PRGData::prgHeader_320x400[0x0401] = {
    0x01, 0x10, 0x0C, 0x10, 0x0A, 0x00, 0x9E, 0x20, 0x34, 0x31, 0x31, 0x32,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xD8, 0xA2, 0xFF, 0x9A, 0xA9, 0x76,
    0x8D, 0xFC, 0xFF, 0xA9, 0x10, 0x8D, 0xFD, 0xFF, 0x20, 0x80, 0x10, 0xA9,
    0x00, 0x8D, 0x15, 0xFF, 0x8D, 0x16, 0xFF, 0xA2, 0x00, 0xBD, 0xC8, 0x12,
    0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D, 0xFE, 0xFF, 0xE8, 0xE0, 0x02,
    0xD0, 0xEF, 0xAD, 0x09, 0xFF, 0x8D, 0x09, 0xFF, 0x8D, 0x3F, 0xFF, 0x58,
    0xA2, 0xFF, 0xA0, 0xFF, 0xA9, 0xCF, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x98,
    0xAA, 0xA9, 0x7F, 0x8D, 0x30, 0xFD, 0x8D, 0x08, 0xFF, 0xAD, 0x08, 0xFF,
    0x29, 0x10, 0xA8, 0xE0, 0x10, 0xD0, 0xE5, 0xC0, 0x00, 0xD0, 0xE1, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0x74, 0x10, 0x10, 0x10, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0xFC, 0xFF, 0x78, 0x8D, 0x3E,
    0xFF, 0x20, 0xF0, 0x11, 0x20, 0x84, 0xFF, 0xA9, 0x0B, 0x8D, 0x06, 0xFF,
    0xAD, 0xFF, 0x14, 0x8D, 0x19, 0xFF, 0x2C, 0x07, 0xFF, 0x70, 0x08, 0xA9,
    0xA2, 0xA2, 0x01, 0xA0, 0xF9, 0xD0, 0x06, 0xA9, 0xA2, 0xA2, 0x01, 0xA0,
    0xE0, 0x8D, 0xC8, 0x12, 0x8E, 0xC9, 0x12, 0x8C, 0xCD, 0x12, 0xAD, 0x07,
    0xFF, 0x29, 0x40, 0x85, 0xE0, 0xA9, 0x00, 0xAA, 0x1D, 0x00, 0x16, 0x1D,
    0x00, 0x17, 0xE8, 0xE0, 0xC8, 0xD0, 0xF5, 0x29, 0x07, 0xC9, 0x01, 0xA9,
    0xFF, 0x69, 0x00, 0x29, 0x08, 0x05, 0xE0, 0x85, 0xE0, 0xA2, 0x00, 0xBD,
    0xFF, 0x15, 0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x15, 0xBD, 0xFF, 0x16,
    0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x16, 0xE8, 0xD0, 0xE9, 0xAD, 0xFF,
    0x17, 0xD0, 0x11, 0xA9, 0xA2, 0x8D, 0xCC, 0x12, 0xA9, 0xD0, 0x8D, 0xCE,
    0x12, 0xA9, 0x12, 0x8D, 0xCF, 0x12, 0xD0, 0x0B, 0xA2, 0x03, 0xBD, 0xC8,
    0x12, 0x9D, 0xCC, 0x12, 0xCA, 0x10, 0xF7, 0x8D, 0x3F, 0xFF, 0xA9, 0x00,
    0x20, 0x24, 0x11, 0xA9, 0x01, 0x20, 0x24, 0x11, 0x20, 0xF0, 0x11, 0xA9,
    0x3B, 0x8D, 0x06, 0xFF, 0x60, 0xAA, 0xD0, 0x03, 0xA0, 0xD0, 0x2C, 0xA0,
    0xDB, 0xA2, 0x0A, 0xB9, 0x00, 0x11, 0x95, 0xDE, 0x88, 0xCA, 0x10, 0xF7,
    0xA0, 0x00, 0x84, 0xDC, 0xA5, 0xDC, 0xF0, 0x0C, 0xC9, 0x64, 0xF0, 0x0E,
    0x20, 0xB8, 0x13, 0xE6, 0xDC, 0x4C, 0x3B, 0x11, 0x20, 0xD2, 0x13, 0x4C,
    0x46, 0x11, 0x20, 0x77, 0x13, 0x20, 0xC8, 0x13, 0xA9, 0x60, 0x4C, 0x30,
    0x13, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x98, 0xFF, 0x15, 0x00, 0x14, 0xE0, 0x11, 0xDC, 0x11, 0xE8, 0x00, 0xA6,
    0xFF, 0x16, 0x00, 0x15, 0xE8, 0x11, 0xDC, 0x11, 0xF0, 0x3B, 0x3D, 0x3F,
    0x39, 0x18, 0x60, 0x68, 0x70, 0x98, 0xA8, 0xB0, 0xB8, 0x78, 0x80, 0x88,
    0x90, 0xC8, 0xD0, 0xD8, 0xE0, 0x2C, 0x07, 0xFF, 0x70, 0x03, 0xA9, 0xFC,
    0x2C, 0xA9, 0xE3, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x60, 0x48, 0x8A, 0x48,
    0x98, 0x48, 0xAD, 0x1D, 0xFF, 0xCD, 0x1D, 0xFF, 0xF0, 0xFB, 0xEA, 0xEA,
    0xAD, 0x1E, 0xFF, 0x29, 0x1C, 0x4A, 0x4A, 0x8D, 0x1A, 0x12, 0x10, 0x00,
    0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0xA5, 0xEA, 0xA2, 0xC8,
    0xE0, 0xD0, 0xF0, 0x08, 0x24, 0xEA, 0x20, 0x00, 0x98, 0x4C, 0x37, 0x12,
    0xEA, 0x20, 0x00, 0xA6, 0xAD, 0x26, 0x12, 0x29, 0x08, 0x09, 0xC0, 0x18,
    0x69, 0x08, 0x8D, 0x26, 0x12, 0x29, 0x10, 0xD0, 0x03, 0xA2, 0x00, 0x2C,
    0xA2, 0x04, 0xBD, 0xC8, 0x12, 0x8D, 0x0A, 0xFF, 0xBD, 0xC9, 0x12, 0x8D,
    0x0B, 0xFF, 0xBD, 0xCA, 0x12, 0x8D, 0xFE, 0xFF, 0xBD, 0xCB, 0x12, 0x8D,
    0xFF, 0xFF, 0xA9, 0xFF, 0x8D, 0x09, 0xFF, 0x68, 0xA8, 0x68, 0xAA, 0x68,
    0x40, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x01, 0x00, 0x12, 0xA2, 0xF9, 0xD0,
    0x12, 0x48, 0x8A, 0x48, 0x98, 0x48, 0xA2, 0x6D, 0xAD, 0x1D, 0xFF, 0xCD,
    0x1D, 0xFF, 0xF0, 0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0xE9,
    0x12, 0x10, 0x00, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x8E,
    0x1E, 0xFF, 0xA2, 0x64, 0xCA, 0xD0, 0xFD, 0x24, 0xEA, 0x24, 0xEA, 0xEA,
    0xA2, 0x00, 0xBD, 0xC8, 0x12, 0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D,
    0xFE, 0xFF, 0xE8, 0xE0, 0x02, 0xD0, 0xEF, 0xA9, 0xAD, 0x8D, 0x1E, 0xFF,
    0xA2, 0x05, 0xAD, 0x1D, 0xFF, 0xCD, 0x1D, 0xFF, 0xF0, 0xFB, 0xCA, 0xD0,
    0xF5, 0xCE, 0x1D, 0xFF, 0x4C, 0x65, 0x12, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0x91, 0xDE, 0xE6, 0xDE, 0xD0, 0x02, 0xE6, 0xDF, 0x60, 0x48, 0xA9,
    0xA9, 0x20, 0x30, 0x13, 0x68, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0xA2, 0x4C,
    0x3C, 0x13, 0x48, 0xA9, 0x8D, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13,
    0xA9, 0xFF, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0x8E, 0x4C, 0x4C, 0x13, 0x20,
    0x39, 0x13, 0x8A, 0x4C, 0x49, 0x13, 0xB1, 0xE0, 0xE6, 0xE0, 0xD0, 0x02,
    0xE6, 0xE1, 0x60, 0xB1, 0xE2, 0xE6, 0xE2, 0xD0, 0x02, 0xE6, 0xE3, 0x60,
    0xB1, 0xE6, 0xA2, 0x06, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x29, 0x03, 0xA8,
    0xB1, 0xE4, 0xA0, 0x00, 0xA2, 0x14, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x18,
    0x69, 0x01, 0x2C, 0x81, 0x13, 0xD0, 0x03, 0x38, 0xE9, 0x04, 0x85, 0xE6,
    0x20, 0x65, 0x13, 0xA2, 0x07, 0x4C, 0x5E, 0x13, 0xEA, 0xEA, 0x20, 0x6E,
    0x13, 0xA2, 0x15, 0x20, 0x5E, 0x13, 0x20, 0x6E, 0x13, 0xA2, 0x16, 0x20,
    0x5E, 0x13, 0x4C, 0x9B, 0x13, 0x20, 0x77, 0x13, 0xA9, 0xEA, 0x20, 0x30,
    0x13, 0xA9, 0xEA, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0xEA, 0x20,
    0x30, 0x13, 0xA9, 0xEA, 0x4C, 0x30, 0x13, 0x20, 0x77, 0x13, 0xA9, 0x12,
    0x20, 0x58, 0x13, 0x4C, 0xC5, 0x13, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA
  };

  const unsigned char PRGData::prgHeader_320x456[0x0401] = {
    0x01, 0x10, 0x0C, 0x10, 0x0A, 0x00, 0x9E, 0x20, 0x34, 0x31, 0x31, 0x32,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xD8, 0xA2, 0xFF, 0x9A, 0xA9, 0x76,
    0x8D, 0xFC, 0xFF, 0xA9, 0x10, 0x8D, 0xFD, 0xFF, 0x20, 0x80, 0x10, 0xA9,
    0x00, 0x8D, 0x15, 0xFF, 0x8D, 0x16, 0xFF, 0xA2, 0x00, 0xBD, 0xC8, 0x12,
    0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D, 0xFE, 0xFF, 0xE8, 0xE0, 0x02,
    0xD0, 0xEF, 0xAD, 0x09, 0xFF, 0x8D, 0x09, 0xFF, 0x8D, 0x3F, 0xFF, 0x58,
    0xA2, 0xFF, 0xA0, 0xFF, 0xA9, 0xDF, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x98,
    0xAA, 0xA9, 0x7F, 0x8D, 0x30, 0xFD, 0x8D, 0x08, 0xFF, 0xAD, 0x08, 0xFF,
    0x29, 0x10, 0xA8, 0xE0, 0x10, 0xD0, 0xE5, 0xC0, 0x00, 0xD0, 0xE1, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0x74, 0x10, 0x10, 0x10, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0xFC, 0xFF, 0x78, 0x8D, 0x3E,
    0xFF, 0x20, 0xF0, 0x11, 0x20, 0x84, 0xFF, 0xA9, 0x0B, 0x8D, 0x06, 0xFF,
    0xAD, 0xFF, 0x14, 0x8D, 0x19, 0xFF, 0x2C, 0x07, 0xFF, 0x70, 0x08, 0xA9,
    0xA3, 0xA2, 0x27, 0xA0, 0xF9, 0xD0, 0x06, 0xA9, 0xA2, 0xA2, 0xF5, 0xA0,
    0xE0, 0x8D, 0xC8, 0x12, 0x8E, 0xC9, 0x12, 0x8C, 0xCD, 0x12, 0xAD, 0x07,
    0xFF, 0x29, 0x40, 0x85, 0xE0, 0xA9, 0x00, 0xAA, 0x1D, 0x00, 0x16, 0x1D,
    0x00, 0x17, 0xE8, 0xE0, 0xE4, 0xD0, 0xF5, 0x29, 0x07, 0xC9, 0x01, 0xA9,
    0xFF, 0x69, 0x00, 0x29, 0x08, 0x05, 0xE0, 0x85, 0xE0, 0xA2, 0x00, 0xBD,
    0xFF, 0x15, 0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x15, 0xBD, 0xFF, 0x16,
    0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x16, 0xE8, 0xD0, 0xE9, 0xAD, 0xFF,
    0x17, 0xD0, 0x11, 0xA9, 0xA2, 0x8D, 0xCC, 0x12, 0xA9, 0xD0, 0x8D, 0xCE,
    0x12, 0xA9, 0x12, 0x8D, 0xCF, 0x12, 0xD0, 0x0B, 0xA2, 0x03, 0xBD, 0xC8,
    0x12, 0x9D, 0xCC, 0x12, 0xCA, 0x10, 0xF7, 0x8D, 0x3F, 0xFF, 0xA9, 0x00,
    0x20, 0x24, 0x11, 0xA9, 0x01, 0x20, 0x24, 0x11, 0x20, 0xF0, 0x11, 0xA9,
    0x3B, 0x8D, 0x06, 0xFF, 0x60, 0xAA, 0xD0, 0x03, 0xA0, 0xD0, 0x2C, 0xA0,
    0xDB, 0xA2, 0x0A, 0xB9, 0x00, 0x11, 0x95, 0xDE, 0x88, 0xCA, 0x10, 0xF7,
    0xA0, 0x00, 0x84, 0xDC, 0xA9, 0x13, 0x85, 0xDD, 0xA5, 0xDC, 0xF0, 0x17,
    0xC9, 0x60, 0xF0, 0x19, 0xC9, 0x64, 0xF0, 0x1F, 0xC9, 0x71, 0xF0, 0x23,
    0x20, 0xB8, 0x13, 0xE6, 0xDC, 0xC6, 0xDD, 0xD0, 0xE7, 0xF0, 0x2A, 0x20,
    0xD2, 0x13, 0x4C, 0x52, 0x11, 0xA6, 0xE8, 0xA9, 0xA4, 0x20, 0xDD, 0x13,
    0x4C, 0x52, 0x11, 0xA5, 0xE4, 0x09, 0x04, 0x85, 0xE4, 0xD0, 0xE8, 0xA6,
    0xE8, 0xA9, 0xCA, 0x20, 0xDD, 0x13, 0x20, 0x77, 0x13, 0x20, 0xC8, 0x13,
    0xA9, 0x60, 0x4C, 0x30, 0x13, 0xC6, 0xDF, 0xA0, 0xED, 0xA9, 0x24, 0x91,
    0xDE, 0xA0, 0xFE, 0xA9, 0xEA, 0x91, 0xDE, 0xC8, 0xA9, 0x4C, 0x91, 0xDE,
    0xC8, 0xE6, 0xDF, 0xA9, 0x00, 0x91, 0xDE, 0xC8, 0xA5, 0xDF, 0x18, 0x69,
    0x02, 0x91, 0xDE, 0x85, 0xDF, 0xA0, 0x00, 0x84, 0xDE, 0x4C, 0x3B, 0x11,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA9, 0xFF, 0x15, 0x00, 0x14, 0xE0, 0x11, 0xDC, 0x11, 0xE8, 0x00, 0xC9,
    0xFF, 0x16, 0x00, 0x15, 0xE8, 0x11, 0xDC, 0x11, 0xF0, 0x3B, 0x3D, 0x3F,
    0x39, 0x18, 0x60, 0x68, 0x70, 0x98, 0xA8, 0xB0, 0xB8, 0x78, 0x80, 0x88,
    0x90, 0xC8, 0xD0, 0xD8, 0xE0, 0x2C, 0x07, 0xFF, 0x70, 0x03, 0xA9, 0xFC,
    0x2C, 0xA9, 0xE3, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x60, 0x48, 0x8A, 0x48,
    0x98, 0x48, 0xAE, 0x1C, 0xFF, 0xAC, 0x1D, 0xFF, 0xCC, 0x1D, 0xFF, 0xF0,
    0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0x1A, 0x12, 0x10, 0x00,
    0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x98, 0x18, 0x69, 0x0F,
    0xA8, 0x8A, 0x69, 0x00, 0x8C, 0x1D, 0xFF, 0x8D, 0x1C, 0xFF, 0xA2, 0x2D,
    0xCA, 0xD0, 0xFD, 0xAD, 0x1F, 0xFF, 0xA0, 0x18, 0xA2, 0x00, 0x8C, 0x1B,
    0xFF, 0x8E, 0x1A, 0xFF, 0x29, 0xFE, 0x8D, 0x1F, 0xFF, 0x09, 0x07, 0xEA,
    0xEA, 0xA2, 0x7F, 0xA0, 0xD1, 0x8E, 0x1E, 0xFF, 0xEA, 0xEA, 0xEA, 0xEA,
    0x8C, 0x1E, 0xFF, 0xA2, 0x03, 0xA0, 0x00, 0xCA, 0xD0, 0xFB, 0x8D, 0x1F,
    0xFF, 0xA0, 0x51, 0x8C, 0x1E, 0xFF, 0xA2, 0x07, 0xCA, 0xD0, 0xFD, 0xA9,
    0x00, 0xA9, 0x00, 0xEA, 0xA2, 0xC8, 0x8A, 0x0A, 0x0A, 0x69, 0x88, 0x8D,
    0x7F, 0x12, 0x20, 0x00, 0xA9, 0xAD, 0x74, 0x12, 0x29, 0x18, 0x49, 0xD8,
    0x8D, 0x74, 0x12, 0x29, 0x10, 0xD0, 0x03, 0xA2, 0x00, 0x2C, 0xA2, 0x04,
    0xBD, 0xC8, 0x12, 0x8D, 0x0A, 0xFF, 0xBD, 0xC9, 0x12, 0x8D, 0x0B, 0xFF,
    0xBD, 0xCA, 0x12, 0x8D, 0xFE, 0xFF, 0xBD, 0xCB, 0x12, 0x8D, 0xFF, 0xFF,
    0xA9, 0xCE, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0xA9, 0xDC, 0x8D, 0x1D, 0xFF,
    0xA9, 0xFF, 0x8D, 0x09, 0xFF, 0x68, 0xA8, 0x68, 0xAA, 0x68, 0x40, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xA3, 0x27, 0x00, 0x12, 0xA2, 0xF9, 0xD0,
    0x12, 0x48, 0x8A, 0x48, 0x98, 0x48, 0xA2, 0x6D, 0xAD, 0x1D, 0xFF, 0xCD,
    0x1D, 0xFF, 0xF0, 0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0xE9,
    0x12, 0x10, 0x00, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x8E,
    0x1E, 0xFF, 0xA2, 0x64, 0xCA, 0xD0, 0xFD, 0x24, 0xEA, 0x24, 0xEA, 0xEA,
    0xA2, 0x00, 0xBD, 0xC8, 0x12, 0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D,
    0xFE, 0xFF, 0xE8, 0xE0, 0x02, 0xD0, 0xEF, 0xA9, 0xAD, 0x8D, 0x1E, 0xFF,
    0xA2, 0x05, 0xAD, 0x1D, 0xFF, 0xCD, 0x1D, 0xFF, 0xF0, 0xFB, 0xCA, 0xD0,
    0xF5, 0xCE, 0x1D, 0xFF, 0x4C, 0xB7, 0x12, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0x91, 0xDE, 0xE6, 0xDE, 0xD0, 0x02, 0xE6, 0xDF, 0x60, 0x48, 0xA9,
    0xA9, 0x20, 0x30, 0x13, 0x68, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0xA2, 0x4C,
    0x3C, 0x13, 0x48, 0xA9, 0x8D, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13,
    0xA9, 0xFF, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0x8E, 0x4C, 0x4C, 0x13, 0x20,
    0x39, 0x13, 0x8A, 0x4C, 0x49, 0x13, 0xB1, 0xE0, 0xE6, 0xE0, 0xD0, 0x02,
    0xE6, 0xE1, 0x60, 0xB1, 0xE2, 0xE6, 0xE2, 0xD0, 0x02, 0xE6, 0xE3, 0x60,
    0xB1, 0xE6, 0xA2, 0x06, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x29, 0x03, 0xA8,
    0xB1, 0xE4, 0xA0, 0x00, 0xA2, 0x14, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x18,
    0x69, 0x01, 0x2C, 0x81, 0x13, 0xD0, 0x03, 0x38, 0xE9, 0x04, 0x85, 0xE6,
    0x20, 0x65, 0x13, 0xA2, 0x07, 0x4C, 0x5E, 0x13, 0xEA, 0xEA, 0x20, 0x6E,
    0x13, 0xA2, 0x15, 0x20, 0x5E, 0x13, 0x20, 0x6E, 0x13, 0xA2, 0x16, 0x20,
    0x5E, 0x13, 0x4C, 0x9B, 0x13, 0x20, 0x77, 0x13, 0xA9, 0xEA, 0x20, 0x30,
    0x13, 0xA9, 0xEA, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0xEA, 0x20,
    0x30, 0x13, 0xA9, 0xEA, 0x4C, 0x30, 0x13, 0x20, 0x77, 0x13, 0xA9, 0x12,
    0x20, 0x58, 0x13, 0x4C, 0xC5, 0x13, 0x48, 0x8A, 0x48, 0x20, 0x77, 0x13,
    0xA9, 0xA2, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13, 0xA9, 0xA0, 0x20,
    0x30, 0x13, 0x68, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0x1D, 0x48,
    0xA9, 0x8C, 0x4C, 0x4C, 0x13
  };

  const unsigned char PRGData::prgHeader_320x464[0x0401] = {
    0x01, 0x10, 0x0C, 0x10, 0x0A, 0x00, 0x9E, 0x20, 0x34, 0x31, 0x31, 0x32,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xD8, 0xA2, 0xFF, 0x9A, 0xA9, 0x76,
    0x8D, 0xFC, 0xFF, 0xA9, 0x10, 0x8D, 0xFD, 0xFF, 0x20, 0x80, 0x10, 0xA9,
    0x00, 0x8D, 0x15, 0xFF, 0x8D, 0x16, 0xFF, 0xA2, 0x00, 0xBD, 0xC8, 0x12,
    0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D, 0xFE, 0xFF, 0xE8, 0xE0, 0x02,
    0xD0, 0xEF, 0xAD, 0x09, 0xFF, 0x8D, 0x09, 0xFF, 0x8D, 0x3F, 0xFF, 0x58,
    0xA2, 0xFF, 0xA0, 0xFF, 0xA9, 0xDF, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x98,
    0xAA, 0xA9, 0x7F, 0x8D, 0x30, 0xFD, 0x8D, 0x08, 0xFF, 0xAD, 0x08, 0xFF,
    0x29, 0x10, 0xA8, 0xE0, 0x10, 0xD0, 0xE5, 0xC0, 0x00, 0xD0, 0xE1, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0x74, 0x10, 0x10, 0x10, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0xFC, 0xFF, 0x78, 0x8D, 0x3E,
    0xFF, 0x20, 0xF0, 0x11, 0x20, 0x84, 0xFF, 0xA9, 0x0B, 0x8D, 0x06, 0xFF,
    0xAD, 0xFF, 0x14, 0x8D, 0x19, 0xFF, 0x2C, 0x07, 0xFF, 0x70, 0x08, 0xA9,
    0xA3, 0xA2, 0x25, 0xA0, 0xF9, 0xD0, 0x06, 0xA9, 0xA2, 0xA2, 0xF3, 0xA0,
    0xE0, 0x8D, 0xC8, 0x12, 0x8E, 0xC9, 0x12, 0x8C, 0xCD, 0x12, 0xAD, 0x07,
    0xFF, 0x29, 0x40, 0x85, 0xE0, 0xA9, 0x00, 0xAA, 0x1D, 0x00, 0x16, 0x1D,
    0x00, 0x17, 0xE8, 0xE0, 0xE8, 0xD0, 0xF5, 0x29, 0x07, 0xC9, 0x01, 0xA9,
    0xFF, 0x69, 0x00, 0x29, 0x08, 0x05, 0xE0, 0x85, 0xE0, 0xA2, 0x00, 0xBD,
    0xFF, 0x15, 0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x15, 0xBD, 0xFF, 0x16,
    0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x16, 0xE8, 0xD0, 0xE9, 0xAD, 0xFF,
    0x17, 0xD0, 0x11, 0xA9, 0xA2, 0x8D, 0xCC, 0x12, 0xA9, 0xD0, 0x8D, 0xCE,
    0x12, 0xA9, 0x12, 0x8D, 0xCF, 0x12, 0xD0, 0x0B, 0xA2, 0x03, 0xBD, 0xC8,
    0x12, 0x9D, 0xCC, 0x12, 0xCA, 0x10, 0xF7, 0x8D, 0x3F, 0xFF, 0xA9, 0x00,
    0x20, 0x24, 0x11, 0xA9, 0x01, 0x20, 0x24, 0x11, 0x20, 0xF0, 0x11, 0xA9,
    0x3B, 0x8D, 0x06, 0xFF, 0x60, 0xAA, 0xD0, 0x03, 0xA0, 0xD0, 0x2C, 0xA0,
    0xDB, 0xA2, 0x0A, 0xB9, 0x00, 0x11, 0x95, 0xDE, 0x88, 0xCA, 0x10, 0xF7,
    0xA0, 0x00, 0x84, 0xDC, 0xA9, 0x15, 0x85, 0xDD, 0xA5, 0xDC, 0xF0, 0x17,
    0xC9, 0x60, 0xF0, 0x19, 0xC9, 0x64, 0xF0, 0x1F, 0xC9, 0x73, 0xF0, 0x23,
    0x20, 0xB8, 0x13, 0xE6, 0xDC, 0xC6, 0xDD, 0xD0, 0xE7, 0xF0, 0x2A, 0x20,
    0xD2, 0x13, 0x4C, 0x52, 0x11, 0xA6, 0xE8, 0xA9, 0xA4, 0x20, 0xDD, 0x13,
    0x4C, 0x52, 0x11, 0xA5, 0xE4, 0x09, 0x04, 0x85, 0xE4, 0xD0, 0xE8, 0xA6,
    0xE8, 0xA9, 0xCA, 0x20, 0xDD, 0x13, 0x20, 0x77, 0x13, 0x20, 0xC8, 0x13,
    0xA9, 0x60, 0x4C, 0x30, 0x13, 0xC6, 0xDF, 0xA0, 0xED, 0xA9, 0x24, 0x91,
    0xDE, 0xA0, 0xFE, 0xA9, 0xEA, 0x91, 0xDE, 0xC8, 0xA9, 0x4C, 0x91, 0xDE,
    0xC8, 0xE6, 0xDF, 0xA9, 0x00, 0x91, 0xDE, 0xC8, 0xA5, 0xDF, 0x18, 0x69,
    0x02, 0x91, 0xDE, 0x85, 0xDF, 0xA0, 0x00, 0x84, 0xDE, 0x4C, 0x3B, 0x11,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA9, 0xFF, 0x15, 0x00, 0x14, 0xE0, 0x11, 0xDC, 0x11, 0xE8, 0x00, 0xC9,
    0xFF, 0x16, 0x00, 0x15, 0xE8, 0x11, 0xDC, 0x11, 0xF0, 0x3B, 0x3D, 0x3F,
    0x39, 0x18, 0x60, 0x68, 0x70, 0x98, 0xA8, 0xB0, 0xB8, 0x78, 0x80, 0x88,
    0x90, 0xC8, 0xD0, 0xD8, 0xE0, 0x2C, 0x07, 0xFF, 0x70, 0x03, 0xA9, 0xFC,
    0x2C, 0xA9, 0xE3, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x60, 0x48, 0x8A, 0x48,
    0x98, 0x48, 0xAE, 0x1C, 0xFF, 0xAC, 0x1D, 0xFF, 0xCC, 0x1D, 0xFF, 0xF0,
    0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0x1A, 0x12, 0x10, 0x00,
    0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x98, 0x18, 0x69, 0x11,
    0xA8, 0x8A, 0x69, 0x00, 0x8C, 0x1D, 0xFF, 0x8D, 0x1C, 0xFF, 0xA2, 0x2D,
    0xCA, 0xD0, 0xFD, 0xAD, 0x1F, 0xFF, 0xA0, 0x18, 0xA2, 0x00, 0x8C, 0x1B,
    0xFF, 0x8E, 0x1A, 0xFF, 0x29, 0xFE, 0x8D, 0x1F, 0xFF, 0x09, 0x07, 0xEA,
    0xEA, 0xA2, 0x7F, 0xA0, 0xD1, 0x8E, 0x1E, 0xFF, 0xEA, 0xEA, 0xEA, 0xEA,
    0x8C, 0x1E, 0xFF, 0xA2, 0x03, 0xA0, 0x00, 0xCA, 0xD0, 0xFB, 0x8D, 0x1F,
    0xFF, 0xA0, 0x51, 0x8C, 0x1E, 0xFF, 0xA2, 0x07, 0xCA, 0xD0, 0xFD, 0xA9,
    0x00, 0xA9, 0x00, 0xEA, 0xA2, 0xC8, 0x8A, 0x0A, 0x0A, 0x69, 0x88, 0x8D,
    0x7F, 0x12, 0x20, 0x00, 0xA9, 0xAD, 0x74, 0x12, 0x29, 0x18, 0x49, 0xD8,
    0x8D, 0x74, 0x12, 0x29, 0x10, 0xD0, 0x03, 0xA2, 0x00, 0x2C, 0xA2, 0x04,
    0xBD, 0xC8, 0x12, 0x8D, 0x0A, 0xFF, 0xBD, 0xC9, 0x12, 0x8D, 0x0B, 0xFF,
    0xBD, 0xCA, 0x12, 0x8D, 0xFE, 0xFF, 0xBD, 0xCB, 0x12, 0x8D, 0xFF, 0xFF,
    0xA9, 0xCE, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0xA9, 0xDE, 0x8D, 0x1D, 0xFF,
    0xA9, 0xFF, 0x8D, 0x09, 0xFF, 0x68, 0xA8, 0x68, 0xAA, 0x68, 0x40, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xA3, 0x25, 0x00, 0x12, 0xA2, 0xF9, 0xD0,
    0x12, 0x48, 0x8A, 0x48, 0x98, 0x48, 0xA2, 0x6D, 0xAD, 0x1D, 0xFF, 0xCD,
    0x1D, 0xFF, 0xF0, 0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0xE9,
    0x12, 0x10, 0x00, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x8E,
    0x1E, 0xFF, 0xA2, 0x64, 0xCA, 0xD0, 0xFD, 0x24, 0xEA, 0x24, 0xEA, 0xEA,
    0xA2, 0x00, 0xBD, 0xC8, 0x12, 0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D,
    0xFE, 0xFF, 0xE8, 0xE0, 0x02, 0xD0, 0xEF, 0xA9, 0xAD, 0x8D, 0x1E, 0xFF,
    0xA2, 0x05, 0xAD, 0x1D, 0xFF, 0xCD, 0x1D, 0xFF, 0xF0, 0xFB, 0xCA, 0xD0,
    0xF5, 0xCE, 0x1D, 0xFF, 0x4C, 0xB7, 0x12, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0x91, 0xDE, 0xE6, 0xDE, 0xD0, 0x02, 0xE6, 0xDF, 0x60, 0x48, 0xA9,
    0xA9, 0x20, 0x30, 0x13, 0x68, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0xA2, 0x4C,
    0x3C, 0x13, 0x48, 0xA9, 0x8D, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13,
    0xA9, 0xFF, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0x8E, 0x4C, 0x4C, 0x13, 0x20,
    0x39, 0x13, 0x8A, 0x4C, 0x49, 0x13, 0xB1, 0xE0, 0xE6, 0xE0, 0xD0, 0x02,
    0xE6, 0xE1, 0x60, 0xB1, 0xE2, 0xE6, 0xE2, 0xD0, 0x02, 0xE6, 0xE3, 0x60,
    0xB1, 0xE6, 0xA2, 0x06, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x29, 0x03, 0xA8,
    0xB1, 0xE4, 0xA0, 0x00, 0xA2, 0x14, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x18,
    0x69, 0x01, 0x2C, 0x81, 0x13, 0xD0, 0x03, 0x38, 0xE9, 0x04, 0x85, 0xE6,
    0x20, 0x65, 0x13, 0xA2, 0x07, 0x4C, 0x5E, 0x13, 0xEA, 0xEA, 0x20, 0x6E,
    0x13, 0xA2, 0x15, 0x20, 0x5E, 0x13, 0x20, 0x6E, 0x13, 0xA2, 0x16, 0x20,
    0x5E, 0x13, 0x4C, 0x9B, 0x13, 0x20, 0x77, 0x13, 0xA9, 0xEA, 0x20, 0x30,
    0x13, 0xA9, 0xEA, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0xEA, 0x20,
    0x30, 0x13, 0xA9, 0xEA, 0x4C, 0x30, 0x13, 0x20, 0x77, 0x13, 0xA9, 0x12,
    0x20, 0x58, 0x13, 0x4C, 0xC5, 0x13, 0x48, 0x8A, 0x48, 0x20, 0x77, 0x13,
    0xA9, 0xA2, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13, 0xA9, 0xA0, 0x20,
    0x30, 0x13, 0x68, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0x1D, 0x48,
    0xA9, 0x8C, 0x4C, 0x4C, 0x13
  };

  const unsigned char PRGData::prgHeader_320x496[0x0401] = {
    0x01, 0x10, 0x0C, 0x10, 0x0A, 0x00, 0x9E, 0x20, 0x34, 0x31, 0x31, 0x32,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xD8, 0xA2, 0xFF, 0x9A, 0xA9, 0x76,
    0x8D, 0xFC, 0xFF, 0xA9, 0x10, 0x8D, 0xFD, 0xFF, 0x20, 0x80, 0x10, 0xA9,
    0x00, 0x8D, 0x15, 0xFF, 0x8D, 0x16, 0xFF, 0xA2, 0x00, 0xBD, 0xC8, 0x12,
    0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D, 0xFE, 0xFF, 0xE8, 0xE0, 0x02,
    0xD0, 0xEF, 0xAD, 0x09, 0xFF, 0x8D, 0x09, 0xFF, 0x8D, 0x3F, 0xFF, 0x58,
    0xA2, 0xFF, 0xA0, 0xFF, 0xA9, 0xE9, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x98,
    0xAA, 0xA9, 0x7F, 0x8D, 0x30, 0xFD, 0x8D, 0x08, 0xFF, 0xAD, 0x08, 0xFF,
    0x29, 0x10, 0xA8, 0xE0, 0x10, 0xD0, 0xE5, 0xC0, 0x00, 0xD0, 0xE1, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0x74, 0x10, 0x10, 0x10, 0x78,
    0x8D, 0x3E, 0xFF, 0x8D, 0xD0, 0xFD, 0x6C, 0xFC, 0xFF, 0x78, 0x8D, 0x3E,
    0xFF, 0x20, 0xF0, 0x11, 0x20, 0x84, 0xFF, 0xA9, 0x0B, 0x8D, 0x06, 0xFF,
    0xAD, 0xFF, 0x14, 0x8D, 0x19, 0xFF, 0x2C, 0x07, 0xFF, 0x70, 0xDC, 0xA9,
    0xA3, 0xA2, 0x1F, 0xA0, 0xF9, 0xD0, 0x06, 0xA9, 0xA3, 0xA2, 0x1F, 0xA0,
    0xF9, 0x8D, 0xC8, 0x12, 0x8E, 0xC9, 0x12, 0x8C, 0xCD, 0x12, 0xAD, 0x07,
    0xFF, 0x29, 0x40, 0x85, 0xE0, 0xA9, 0x00, 0xAA, 0x1D, 0x00, 0x16, 0x1D,
    0x00, 0x17, 0xE8, 0xE0, 0xF8, 0xD0, 0xF5, 0x29, 0x07, 0xC9, 0x01, 0xA9,
    0xFF, 0x69, 0x00, 0x29, 0x08, 0x05, 0xE0, 0x85, 0xE0, 0xA2, 0x00, 0xBD,
    0xFF, 0x15, 0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x15, 0xBD, 0xFF, 0x16,
    0x29, 0x17, 0x05, 0xE0, 0x9D, 0xFF, 0x16, 0xE8, 0xD0, 0xE9, 0xAD, 0xFF,
    0x17, 0xD0, 0x11, 0xA9, 0xA2, 0x8D, 0xCC, 0x12, 0xA9, 0xD0, 0x8D, 0xCE,
    0x12, 0xA9, 0x12, 0x8D, 0xCF, 0x12, 0xD0, 0x0B, 0xA2, 0x03, 0xBD, 0xC8,
    0x12, 0x9D, 0xCC, 0x12, 0xCA, 0x10, 0xF7, 0x8D, 0x3F, 0xFF, 0xA9, 0x00,
    0x20, 0x24, 0x11, 0xA9, 0x01, 0x20, 0x24, 0x11, 0x20, 0xF0, 0x11, 0xA9,
    0x3B, 0x8D, 0x06, 0xFF, 0x60, 0xAA, 0xD0, 0x03, 0xA0, 0xD0, 0x2C, 0xA0,
    0xDB, 0xA2, 0x0A, 0xB9, 0x00, 0x11, 0x95, 0xDE, 0x88, 0xCA, 0x10, 0xF7,
    0xA0, 0x00, 0x84, 0xDC, 0xA9, 0x16, 0x85, 0xDD, 0xA5, 0xDC, 0xF0, 0x17,
    0xC9, 0x60, 0xF0, 0x19, 0xC9, 0x64, 0xF0, 0x1F, 0xC9, 0x7B, 0xF0, 0x23,
    0x20, 0xB8, 0x13, 0xE6, 0xDC, 0xC6, 0xDD, 0xD0, 0xE7, 0xF0, 0x2A, 0x20,
    0xD2, 0x13, 0x4C, 0x52, 0x11, 0xA6, 0xE8, 0xA9, 0x94, 0x20, 0xDD, 0x13,
    0x4C, 0x52, 0x11, 0xA5, 0xE4, 0x09, 0x04, 0x85, 0xE4, 0xD0, 0xE8, 0xA6,
    0xE8, 0xA9, 0xCA, 0x20, 0xDD, 0x13, 0x20, 0x77, 0x13, 0x20, 0xC8, 0x13,
    0xA9, 0x60, 0x4C, 0x30, 0x13, 0xC6, 0xDF, 0xA0, 0xED, 0xA9, 0x24, 0x91,
    0xDE, 0xA0, 0xFE, 0xA9, 0xEA, 0x91, 0xDE, 0xC8, 0xA9, 0x4C, 0x91, 0xDE,
    0xC8, 0xE6, 0xDF, 0xA9, 0x00, 0x91, 0xDE, 0xC8, 0xA5, 0xDF, 0x18, 0x69,
    0x02, 0x91, 0xDE, 0x85, 0xDF, 0xA0, 0x00, 0x84, 0xDE, 0x4C, 0x3B, 0x11,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA9, 0xFF, 0x15, 0x00, 0x14, 0xE0, 0x11, 0xDC, 0x11, 0xE8, 0x00, 0xC9,
    0xFF, 0x16, 0x00, 0x15, 0xE8, 0x11, 0xDC, 0x11, 0xF0, 0x3B, 0x3D, 0x3F,
    0x39, 0x18, 0x60, 0x68, 0x70, 0x98, 0xA8, 0xB0, 0xB8, 0x78, 0x80, 0x88,
    0x90, 0xC8, 0xD0, 0xD8, 0xE0, 0x2C, 0x07, 0xFF, 0x70, 0x03, 0xA9, 0xFC,
    0x2C, 0xA9, 0xE3, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0x60, 0x48, 0x8A, 0x48,
    0x98, 0x48, 0xAE, 0x1C, 0xFF, 0xAC, 0x1D, 0xFF, 0xCC, 0x1D, 0xFF, 0xF0,
    0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0x1A, 0x12, 0x10, 0x00,
    0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x98, 0x18, 0x69, 0x17,
    0xA8, 0x8A, 0x69, 0x00, 0x8C, 0x1D, 0xFF, 0x8D, 0x1C, 0xFF, 0xA2, 0x2D,
    0xCA, 0xD0, 0xFD, 0xAD, 0x1F, 0xFF, 0xA0, 0x18, 0xA2, 0x00, 0x8C, 0x1B,
    0xFF, 0x8E, 0x1A, 0xFF, 0x29, 0xFE, 0x8D, 0x1F, 0xFF, 0x09, 0x07, 0xEA,
    0xEA, 0xA2, 0x7F, 0xA0, 0xD1, 0x8E, 0x1E, 0xFF, 0xEA, 0xEA, 0xEA, 0xEA,
    0x8C, 0x1E, 0xFF, 0xA2, 0x03, 0xA0, 0x00, 0xCA, 0xD0, 0xFB, 0x8D, 0x1F,
    0xFF, 0xA0, 0x51, 0x8C, 0x1E, 0xFF, 0xA2, 0x07, 0xCA, 0xD0, 0xFD, 0xA9,
    0x00, 0xA9, 0x00, 0xEA, 0xA2, 0xC8, 0x8A, 0x0A, 0x0A, 0x69, 0x88, 0x8D,
    0x7F, 0x12, 0x20, 0x00, 0xA9, 0xAD, 0x74, 0x12, 0x29, 0x18, 0x49, 0xD8,
    0x8D, 0x74, 0x12, 0x29, 0x10, 0xD0, 0x03, 0xA2, 0x00, 0x2C, 0xA2, 0x04,
    0xBD, 0xC8, 0x12, 0x8D, 0x0A, 0xFF, 0xBD, 0xC9, 0x12, 0x8D, 0x0B, 0xFF,
    0xBD, 0xCA, 0x12, 0x8D, 0xFE, 0xFF, 0xBD, 0xCB, 0x12, 0x8D, 0xFF, 0xFF,
    0xA9, 0xCE, 0xCD, 0x1D, 0xFF, 0xD0, 0xFB, 0xA9, 0xE8, 0x8D, 0x1D, 0xFF,
    0xA9, 0xFF, 0x8D, 0x09, 0xFF, 0x68, 0xA8, 0x68, 0xAA, 0x68, 0x40, 0xEA,
    0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xA3, 0x1F, 0x00, 0x12, 0xA2, 0xF9, 0xD0,
    0x12, 0x48, 0x8A, 0x48, 0x98, 0x48, 0xA2, 0x6D, 0xAD, 0x1D, 0xFF, 0xCD,
    0x1D, 0xFF, 0xF0, 0xFB, 0xAD, 0x1E, 0xFF, 0x29, 0x0E, 0x4A, 0x8D, 0xE9,
    0x12, 0x10, 0x00, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA5, 0xEA, 0x8E,
    0x1E, 0xFF, 0xA2, 0x64, 0xCA, 0xD0, 0xFD, 0x24, 0xEA, 0x24, 0xEA, 0xEA,
    0xA2, 0x00, 0xBD, 0xC8, 0x12, 0x9D, 0x0A, 0xFF, 0xBD, 0xCA, 0x12, 0x9D,
    0xFE, 0xFF, 0xE8, 0xE0, 0x02, 0xD0, 0xEF, 0xA9, 0xAD, 0x8D, 0x1E, 0xFF,
    0xA2, 0x05, 0xAD, 0x1D, 0xFF, 0xCD, 0x1D, 0xFF, 0xF0, 0xFB, 0xCA, 0xD0,
    0xF5, 0xCE, 0x1D, 0xFF, 0x4C, 0xB7, 0x12, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
    0xEA, 0x91, 0xDE, 0xE6, 0xDE, 0xD0, 0x02, 0xE6, 0xDF, 0x60, 0x48, 0xA9,
    0xA9, 0x20, 0x30, 0x13, 0x68, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0xA2, 0x4C,
    0x3C, 0x13, 0x48, 0xA9, 0x8D, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13,
    0xA9, 0xFF, 0x4C, 0x30, 0x13, 0x48, 0xA9, 0x8E, 0x4C, 0x4C, 0x13, 0x20,
    0x39, 0x13, 0x8A, 0x4C, 0x49, 0x13, 0xB1, 0xE0, 0xE6, 0xE0, 0xD0, 0x02,
    0xE6, 0xE1, 0x60, 0xB1, 0xE2, 0xE6, 0xE2, 0xD0, 0x02, 0xE6, 0xE3, 0x60,
    0xB1, 0xE6, 0xA2, 0x06, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x29, 0x03, 0xA8,
    0xB1, 0xE4, 0xA0, 0x00, 0xA2, 0x14, 0x20, 0x5E, 0x13, 0xA5, 0xE6, 0x18,
    0x69, 0x01, 0x2C, 0x81, 0x13, 0xD0, 0x03, 0x38, 0xE9, 0x04, 0x85, 0xE6,
    0x20, 0x65, 0x13, 0xA2, 0x07, 0x4C, 0x5E, 0x13, 0xEA, 0xEA, 0x20, 0x6E,
    0x13, 0xA2, 0x15, 0x20, 0x5E, 0x13, 0x20, 0x6E, 0x13, 0xA2, 0x16, 0x20,
    0x5E, 0x13, 0x4C, 0x9B, 0x13, 0x20, 0x77, 0x13, 0xA9, 0xEA, 0x20, 0x30,
    0x13, 0xA9, 0xEA, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0xEA, 0x20,
    0x30, 0x13, 0xA9, 0xEA, 0x4C, 0x30, 0x13, 0x20, 0x77, 0x13, 0xA9, 0x12,
    0x20, 0x58, 0x13, 0x4C, 0xC5, 0x13, 0x48, 0x8A, 0x48, 0x20, 0x77, 0x13,
    0xA9, 0xA2, 0x20, 0x30, 0x13, 0x68, 0x20, 0x30, 0x13, 0xA9, 0xA0, 0x20,
    0x30, 0x13, 0x68, 0x20, 0x30, 0x13, 0x20, 0xA5, 0x13, 0xA9, 0x1D, 0x48,
    0xA9, 0x8C, 0x4C, 0x4C, 0x13
  };

  PRGData::PRGData()
    : buf((unsigned char *) 0),
      luminanceCodeTable((int *) 0),
      colorCodeTable((int *) 0),
      bitmapTable((bool *) 0),
      prgHeader(&(prgHeader_320x464[0])),
      nLines(464)
  {
    try {
      buf = new unsigned char[0xD501];
      luminanceCodeTable = new int[40 * 496];
      colorCodeTable = new int[40 * 496];
      bitmapTable = new bool[320 * 496];
      this->clear();
    }
    catch (...) {
      if (buf)
        delete[] buf;
      if (luminanceCodeTable)
        delete[] luminanceCodeTable;
      if (colorCodeTable)
        delete[] colorCodeTable;
      if (bitmapTable)
        delete[] bitmapTable;
      throw;
    }
  }

  PRGData::~PRGData()
  {
    delete[] buf;
    delete[] luminanceCodeTable;
    delete[] colorCodeTable;
    delete[] bitmapTable;
  }

  void PRGData::clear()
  {
    for (size_t i = 0x0000; i < 0x0401; i++)
      buf[i] = prgHeader[i];
    for (size_t i = 0x0401; i < 0xD501; i++)
      buf[i] = 0x00;
    for (size_t i = 0; i < (40 * 496); i++) {
      luminanceCodeTable[i] = 0;
      colorCodeTable[i] = 0;
    }
    for (size_t i = 0; i < (320 * 496); i++)
      bitmapTable[i] = false;
  }

  void PRGData::convertImageData()
  {
    for (size_t i = 0x0801; i < 0xD501; i++)
      buf[i] = 0x00;
    int     offs = (nLines > 400 ? 24 : 0);
    for (int yc = 0; yc < 496; yc++) {
      if (yc & 2)
        continue;
      for (int xc = 0; xc < 320; xc += 8) {
        int     l0_ = this->l0(xc, yc);
        int     l1_ = this->l1(xc, yc);
        int     c0_ = this->c0(xc, yc);
        int     c1_ = this->c1(xc, yc);
        if (l0_ == 0)
          c0_ = 0;
        else
          l0_--;
        if (l1_ == 0)
          c1_ = 0;
        else
          l1_--;
        unsigned char lCode = (unsigned char) (((l0_ & 7) << 4) | (l1_ & 7));
        unsigned char cCode = (unsigned char) ((c0_ & 15) | ((c1_ & 15) << 4));
        int     addr = ((yc >> 4) * 40) + (xc >> 3) + offs;
        if (addr >= 0x0400)
          addr = (addr - 0x0400) + 0x4000;
        if (yc & 1)
          addr = addr + 0x2000;
        addr = addr + ((yc & 12) << 9);
        if (addr < 0x0800)
          addr = addr + 0x1800;
        else if (addr < 0x4800)
          addr = addr + 0x5800;
        else if (addr < 0x6000)
          addr = addr + 0x6000;
        else
          addr = addr + 0x6800;
        addr = addr - 0x0FFF;
        buf[addr] = lCode;
        buf[addr + 0x0400] = cCode;
      }
    }
    for (int yc = 0; yc < 496; yc++) {
      for (int xc = 0; xc < 320; xc++) {
        bool    b = this->getPixel(xc, yc);
        int     addr = ((((yc >> 4) * 40) + (xc >> 3) + offs) << 3)
                       + ((yc & 14) >> 1);
        if (addr >= 0x2000)
          addr = (addr - 0x2000) + 0x4000;
        if (yc & 1)
          addr = addr + 0x2000;
        if (addr < 0x4000)
          addr = addr + 0x2000;
        else
          addr = addr + 0x6000;
        addr = addr - 0x0FFF;
        buf[addr] = buf[addr] | (unsigned char) (int(b) << (7 - (xc & 7)));
      }
    }
  }

  void PRGData::setVerticalSize(int n)
  {
    if (n < 400) {
      n = n << 1;
      interlaceDisabled() = 0x01;
    }
    else
      interlaceDisabled() = 0x00;
    if (n <= 400) {
      prgHeader = &(prgHeader_320x400[0]);
      nLines = 400;
    }
    else if (n <= 456) {
      prgHeader = &(prgHeader_320x456[0]);
      nLines = 456;
    }
    else if (n <= 464) {
      prgHeader = &(prgHeader_320x464[0]);
      nLines = 464;
    }
    else {
      prgHeader = &(prgHeader_320x496[0]);
      nLines = 496;
    }
    for (size_t i = 0x0000; i < 0x0401; i++)
      buf[i] = prgHeader[i];
  }

}       // namespace Plus4FLIConv

