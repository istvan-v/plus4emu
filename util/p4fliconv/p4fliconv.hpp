
// p4fliconv: high resolution interlaced FLI converter utility
// Copyright (C) 2007-2008 Istvan Varga <istvanv@users.sourceforge.net>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Plus/4 program files generated by this utility are not covered by the
// GNU General Public License, and can be used, modified, and distributed
// without any restrictions.

#ifndef P4FLICONV_P4FLICONV_HPP
#define P4FLICONV_P4FLICONV_HPP

#include "plus4emu.hpp"
#include "fileio.hpp"
#include "cfg_db.hpp"
#include "system.hpp"
#include "ted.hpp"

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>

#include <FL/Fl.H>
#include <FL/Fl_File_Chooser.H>

class Plus4FLIConvGUI;
class Plus4FLIConvGUI_Display;
class Plus4FLIConvGUI_TED7360;

#include "flicfg.hpp"
#include "flidisp.hpp"
#include "imageconv.hpp"
#include "prgdata.hpp"

#include "p4fliconv_fl.hpp"

namespace Plus4FLIConv {

  class FLIConverter {
   protected:
    void    (*progressMessageCallback)(void *userData, const char *msg);
    void    *progressMessageUserData;
    bool    (*progressPercentageCallback)(void *userData, int n);
    void    *progressPercentageUserData;
    int     prvProgressPercentage;
   public:
    FLIConverter();
    virtual ~FLIConverter();
    // the return value is false if the processing has been stopped
    virtual bool processImage(PRGData& prgData, unsigned int& prgEndAddr,
                              const char *infileName,
                              YUVImageConverter& imgConv,
                              Plus4Emu::ConfigurationDB& config);
    virtual void setProgressMessageCallback(void (*func)(void *userData,
                                                         const char *msg),
                                            void *userData_);
    virtual void setProgressPercentageCallback(bool (*func)(void *userData,
                                                            int n),
                                               void *userData_);
   protected:
    virtual void progressMessage(const char *msg);
    virtual bool setProgressPercentage(int n);
  };

  // --------------------------------------------------------------------------

  static inline double calculateError(double a, double b)
  {
    return std::fabs(a - b);
  }

  static inline double calculateErrorSqr(double a, double b)
  {
    return ((a - b) * (a - b));
  }

  static inline void limitValue(int& x, int min_, int max_)
  {
    x = (x > min_ ? (x < max_ ? x : max_) : min_);
  }

  static inline void limitValue(double& x, double min_, double max_)
  {
    if (!(x >= min_ && x <= max_)) {
      if (x < min_)
        x = min_;
      else if (x > max_)
        x = max_;
      else
        x = (min_ + max_) * 0.5;
    }
  }

}       // namespace Plus4FLIConv

class Plus4FLIConvGUI_TED7360 : public Plus4::TED7360 {
 private:
  Plus4FLIConvGUI&  gui;
 public:
  Plus4FLIConvGUI_TED7360(Plus4FLIConvGUI& gui_);
  virtual ~Plus4FLIConvGUI_TED7360();
 protected:
  virtual void videoOutputCallback(const uint8_t *buf, size_t nBytes);
};

#endif  // P4FLICONV_P4FLICONV_HPP

