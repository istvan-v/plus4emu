
// p4fliconv: high resolution interlaced FLI converter utility
// Copyright (C) 2007-2008 Istvan Varga <istvanv@users.sourceforge.net>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Plus/4 program files generated by this utility are not covered by the
// GNU General Public License, and can be used, modified, and distributed
// without any restrictions.

#ifndef P4FLICONV_FLICFG_HPP
#define P4FLICONV_FLICFG_HPP

#include "p4fliconv.hpp"
#include "cfg_db.hpp"

namespace Plus4FLIConv {

  class FLIConfiguration : public Plus4Emu::ConfigurationDB {
   protected:
    int         conversionType;
    double      yMin;
    double      yMax;
    double      scaleX;
    double      scaleY;
    double      offsetX;
    double      offsetY;
    double      saturationMult;
    double      saturationPow;
    double      gammaCorrection;
    double      monitorGamma;
    int         ditherMode;
    double      ditherLimit;
    double      ditherDiffusion;
    bool        enablePAL;
    int         xShift0;
    int         xShift1;
    int         borderColor;
    int         verticalSize;
    bool        luminance1BitMode;
    bool        disableInterpolation;
    bool        noLuminanceInterlace;
    bool        disableFLIEffects;
    int         colorInterlaceMode;
    int         luminanceSearchMode;
    double      luminanceSearchModeParam;
    double      mcColorErrorScale;
    int         multiColorQuality;
    int         c64Color0;
    int         c64Color1;
    int         c64Color2;
    int         c64Color3;
    int         c64Color4;
    int         c64Color5;
    int         c64Color6;
    int         c64Color7;
    int         c64Color8;
    int         c64Color9;
    int         c64Color10;
    int         c64Color11;
    int         c64Color12;
    int         c64Color13;
    int         c64Color14;
    int         c64Color15;
    int         prgCompressionLevel;
    int         outputFileFormat;
    bool        configChangeFlag;
   private:
    static void configChangeCallbackBoolean(void *userData_,
                                            const std::string& name_,
                                            bool value_);
    static void configChangeCallbackInteger(void *userData_,
                                            const std::string& name_,
                                            int value_);
    static void configChangeCallbackFloat(void *userData_,
                                          const std::string& name_,
                                          double value_);
    static void configChangeCallbackVSize(void *userData_,
                                          const std::string& name_,
                                          int value_);
   public:
    FLIConfiguration();
    virtual ~FLIConfiguration();
    void resetDefaultSettings();
    inline bool isFLIConfigurationChanged() const
    {
      return configChangeFlag;
    }
    inline void clearConfigurationChangeFlag()
    {
      configChangeFlag = false;
    }
  };

}       // namespace Plus4FLIConv

#endif  // P4FLICONV_FLICFG_HPP

