
// p4fliconv: high resolution interlaced FLI converter utility
// Copyright (C) 2007-2008 Istvan Varga <istvanv@users.sourceforge.net>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Plus/4 program files generated by this utility are not covered by the
// GNU General Public License, and can be used, modified, and distributed
// without any restrictions.

#ifndef P4FLICONV_MCNOFLI_HPP
#define P4FLICONV_MCNOFLI_HPP

#include "p4fliconv.hpp"

namespace Plus4FLIConv {

  class P4FLI_MultiColorNoFLI : public FLIConverter {
   public:
    class Line160 {
     private:
      float   *buf;
     public:
      Line160();
      Line160(const Line160& r);
      virtual ~Line160();
      Line160& operator=(const Line160& r);
      void clear();
      void setBorderColor(float c);
      inline float& operator[](long n)
      {
        return buf[n + 16L];
      }
      inline float& pixel(long x)
      {
        return buf[x + 16L];
      }
      inline float getPixel(long x) const
      {
        return buf[x + 16L];
      }
      inline void setPixel(long x, float n)
      {
        if (x >= 0L && x < 160L)
          buf[x + 16L] = n;
      }
    };
    // ------------------------
    class Image160x200 {
     private:
      Line160 *buf;
     public:
      Image160x200();
      Image160x200(const Image160x200& r);
      virtual ~Image160x200();
      Image160x200& operator=(const Image160x200& r);
      inline Line160& operator[](long n)
      {
        return buf[n];
      }
    };
    // ------------------------
    class YUVImage160x200 {
     private:
      Image160x200  imageY;
      Image160x200  imageU;
      Image160x200  imageV;
     public:
      YUVImage160x200();
      YUVImage160x200(const YUVImage160x200& r);
      virtual ~YUVImage160x200();
      YUVImage160x200& operator=(const YUVImage160x200& r);
      inline Image160x200& y()
      {
        return imageY;
      }
      inline Image160x200& u()
      {
        return imageU;
      }
      inline Image160x200& v()
      {
        return imageV;
      }
    };
    // ------------------------
    double  monitorGamma;
    double  ditherLimit;
    double  ditherScale;
    int     ditherMode;
    int     borderColor;
    int     conversionQuality;
    bool    luminance1BitMode;
   private:
    struct AttrBlock4x8 {
      const double  *errorTable;
      int&    color0;
      int&    color3;
      int     color1;
      int     color2;
      int     nColors;
      int     pixelColorCodes[32];
      int     pixelColorCounts[32];
      AttrBlock4x8(const double *errorTable_, int& color0_, int& color3_);
      AttrBlock4x8(const AttrBlock4x8& r);
      ~AttrBlock4x8()
      {
      }
      void addPixel(int c);
      inline double calculateError() const;
    };
    YUVImage160x200 resizedImage;
    YUVImage160x200 ditherErrorImage;
    int     *ditheredImage;
    double  *errorTable;
    // ----------------
    static void pixelStoreCallback(void *, int, int, float, float, float);
    void checkParameters();
    void createErrorTable(double colorErrorScale);
    void ditherLine(long yc);
    bool convertImage(PRGData& prgData, double& totalError);
   public:
    P4FLI_MultiColorNoFLI();
    virtual ~P4FLI_MultiColorNoFLI();
    virtual bool processImage(PRGData& prgData, unsigned int& prgEndAddr,
                              const char *infileName,
                              YUVImageConverter& imgConv,
                              Plus4Emu::ConfigurationDB& config);
  };

}       // namespace Plus4FLIConv

#endif  // P4FLICONV_MCNOFLI_HPP

